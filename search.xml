<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql基础</title>
      <link href="/2023/02/02/mysql-ji-chu/"/>
      <url>/2023/02/02/mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>来自b站<a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=5&share_source=copy_web&vd_source=c712a2c89807935856be26ca0afa4d6e">黑马程序员新版JavaWeb基础教程，Java web从入门到企业实战完整版</a></p><h2 id="1-DDL-1"><a href="#1-DDL-1" class="headerlink" title="1. DDL(1)"></a>1. DDL(1)</h2><blockquote><p>DDL(Data Definition Language)数据定义语言，用来定义数据库对象：数据库，表，列等</p></blockquote><h3 id="1-1-查询数据库"><a href="#1-1-查询数据库" class="headerlink" title="1.1 查询数据库"></a>1.1 查询数据库</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> <span class="token comment">-- 查询所有数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-创建数据库"><a href="#1-2-创建数据库" class="headerlink" title="1.2 创建数据库"></a>1.2 创建数据库</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建数据库</span><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3-删除数据库"><a href="#1-3-删除数据库" class="headerlink" title="1.3 删除数据库"></a>1.3 删除数据库</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 删除数据库</span><span class="token keyword">drop</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-4-使用数据库"><a href="#1-4-使用数据库" class="headerlink" title="1.4 使用数据库"></a>1.4 使用数据库</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> 数据库名称<span class="token punctuation">;</span> <span class="token comment">-- 使用数据库</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 查看当前使用的数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-DDL-2"><a href="#2-DDL-2" class="headerlink" title="2. DDL(2)"></a>2. DDL(2)</h2><h3 id="3-1-查询表"><a href="#3-1-查询表" class="headerlink" title="3.1 查询表"></a>3.1 查询表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span> <span class="token comment">-- 查询当前数据库下所有表</span><span class="token keyword">desc</span> 表名称<span class="token punctuation">;</span> <span class="token comment">-- 查询表结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-创建表"><a href="#3-2-创建表" class="headerlink" title="3.2 创建表"></a>3.2 创建表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span> 数据类型<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span> 数据类型<span class="token number">2</span><span class="token punctuation">,</span>…字段名n 数据类型n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#ff6781" >注意：最后一行末尾，不能加逗号。</font></p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202302021718423.png" alt="示例" style="zoom:50%;" /><h3 id="3-3-修改表"><a href="#3-3-修改表" class="headerlink" title="3.3 修改表"></a>3.3 修改表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改表名</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">rename</span> <span class="token keyword">to</span> 新表名<span class="token punctuation">;</span><span class="token comment">-- 添加一列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 列名 数据类型<span class="token punctuation">;</span><span class="token comment">-- 修改数据类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 列名 新数据类型<span class="token punctuation">;</span><span class="token comment">-- 修改列名和数据类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 列名 新列名 新数据类型<span class="token punctuation">;</span><span class="token comment">-- 删除列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 列名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-DML"><a href="#3-DML" class="headerlink" title="3. DML"></a>3. DML</h2><blockquote><p>DML（Data Manipulation Language）数据操作语言，用来对数据库中表的数据进行增删改。</p><p>主要是对数据进行增（insert）删（delete）改（update）操作。</p></blockquote><h3 id="3-1-添加数据"><a href="#3-1-添加数据" class="headerlink" title="3.1 添加数据"></a>3.1 添加数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 给指定列添加数据(一行)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span>…<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>…<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 给全部列添加数据(一行)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> 表名 <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>…<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 批量添加(多行)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> 表名 <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>…<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>…<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>…<span class="token punctuation">)</span>…<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-修改数据"><a href="#3-2-修改数据" class="headerlink" title="3.2 修改数据"></a>3.2 修改数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改表数据</span><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 列名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">,</span>… <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><font color="#ff6781">注意: 1. 修改语句中如果不加条件，则将所有数据都修改！ 2.像上面的语句中的中括号，表示在写sql语句中可以省略这部分</font><h3 id="3-3-删除数据"><a href="#3-3-删除数据" class="headerlink" title="3.3 删除数据"></a>3.3 删除数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 删除表数据</span><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-DQL"><a href="#4-DQL" class="headerlink" title="4. DQL"></a>4. DQL</h2><p>查询样例建表语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 删除stu表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> stu<span class="token punctuation">;</span><span class="token comment">-- 创建stu表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu <span class="token punctuation">(</span> id <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token comment">-- 编号</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 姓名</span> age <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token comment">-- 年龄</span> sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 性别</span> address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 地址</span> math <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 数学成绩</span> english <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 英语成绩</span> hire_date <span class="token keyword">date</span> <span class="token comment">-- 入学时间</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>address<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english<span class="token punctuation">,</span>hire_date<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'马运'</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'杭州'</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token string">'1995-09-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'马花疼'</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token string">'1998-09-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'马斯克'</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'香港'</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token string">'1999-09-02'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'柳白'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token string">'湖南'</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token string">'1997-09-05'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'柳青'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'湖南'</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'1998-09-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'刘德花'</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'香港'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">'1998-09-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'张学右'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token string">'香港'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">'1998-09-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'德玛西亚'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'南京'</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token string">'1994-09-02'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-基础查询"><a href="#4-1-基础查询" class="headerlink" title="4.1 基础查询"></a>4.1 基础查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询多个字段</span><span class="token keyword">select</span> 列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span>… <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token comment">#查询所有数据</span><span class="token comment">-- 去重</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> 字段 <span class="token keyword">from</span> 表名<span class="token comment">-- 起别名 as(可以省略)</span><span class="token keyword">select</span> 列名<span class="token number">1</span> <span class="token keyword">as</span> 新列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span> <span class="token keyword">as</span> 新列名<span class="token number">2</span><span class="token punctuation">,</span>… <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-条件查询"><a href="#4-2-条件查询" class="headerlink" title="4.2 条件查询"></a>4.2 条件查询</h3><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202302021734762.png" alt="运算符" style="zoom:50%;" /><p>示例：</p><ul><li><p>查询年龄大于20岁的学员信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询年龄大于等于20岁的学员信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询年龄大于等于20岁 并且 年龄 小于等于 30岁 的学员信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span>  age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">and</span>  age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>上面语句中 &amp;&amp;  和  and  都表示并且的意思。建议使用 and 。</p><p>也可以使用  between … and 来实现上面需求</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">and</span> <span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询入学日期在’1998-09-01’ 到 ‘1999-09-01’  之间的学员信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> hire_date <span class="token operator">BETWEEN</span> <span class="token string">'1998-09-01'</span> <span class="token operator">and</span> <span class="token string">'1999-09-01'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询年龄等于18岁的学员信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询年龄不等于18岁的学员信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">!=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">&lt;></span> <span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查询年龄等于18岁 或者 年龄等于20岁 或者 年龄等于22岁的学员信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">20</span> <span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查询英语成绩为 null的学员信息</p><p>null值的比较不能使用 &#x3D;  或者 !&#x3D; 。需要使用 is  或者 is not</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> english <span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">;</span> <span class="token comment">-- 这个语句是不行的</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> english <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> english <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>模糊查询使用like关键字，可以使用通配符进行占位:</p><p>（1）_ : 代表单个任意字符</p><p>（2）% : 代表任意个数字符</p></blockquote><ul><li><p>查询姓’马’的学员信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'马%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询第二个字是’花’的学员信息  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'_花%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询名字中包含 ‘德’ 的学员信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%德%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="4-3-排序查询"><a href="#4-3-排序查询" class="headerlink" title="4.3 排序查询"></a>4.3 排序查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 排序字段名<span class="token number">1</span> <span class="token punctuation">[</span>排序方式<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>排序字段名<span class="token number">2</span> <span class="token punctuation">[</span>排序方式<span class="token number">2</span><span class="token punctuation">]</span> …<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ASC(ascend) ： 升序排列 （默认值） </li><li>DESC(descend) ： 降序排列</li></ul><p><font color="#ff6781">注意：如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</font></p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202302021733124.png" alt="示例" style="zoom:50%;" /><h3 id="4-4-聚合函数"><a href="#4-4-聚合函数" class="headerlink" title="4.4 聚合函数"></a>4.4 聚合函数</h3><blockquote><p>将一列数据作为一个整体，进行纵向计算。</p></blockquote><table><thead><tr><th align="center">函数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">avg()</td><td align="center">返回某列的平均值</td></tr><tr><td align="center">count()</td><td align="center">返回某列的行数</td></tr><tr><td align="center">max()</td><td align="center">返回某列的最大值</td></tr><tr><td align="center">min()</td><td align="center">返回某列的最小值</td></tr><tr><td align="center">sum()</td><td align="center">返回某列的和</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 聚合函数名<span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="#ff6781">注意：null 值不参与所有聚合函数运算</font></p><h3 id="4-5-分组查询"><a href="#4-5-分组查询" class="headerlink" title="4.5 分组查询"></a>4.5 分组查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 分组前条件限定<span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段名 <span class="token punctuation">[</span><span class="token keyword">HAVING</span> 分组后条件过滤<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>where 和 having 区别：</strong></p><ul><li><p>执行时机不一样：where 是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤。</p></li><li><p>可判断的条件不一样：where 不能对聚合函数进行判断，having 可以。</p></li></ul><p><font color="#ff6781">注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</font></p><p>示例</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202302021733947.png" alt="示例" style="zoom:50%;" /><h3 id="4-6-分页查询"><a href="#4-6-分页查询" class="headerlink" title="4.6 分页查询"></a>4.6 分页查询</h3><pre class="line-numbers language-none"><code class="language-none">SELECT 字段列表 FROM 表名 LIMIT  起始索引 , 查询条目数;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="#ff6781">注意： 上述语句中的起始索引是从0开始</font></p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202302021734610.png" alt="示例" style="zoom:50%;" /><p>从上面的练习推导出起始索引计算公式：<code>起始索引 = (当前页码 - 1) * 每页显示的条数</code></p><h2 id="5-约束"><a href="#5-约束" class="headerlink" title="5. 约束"></a>5. 约束</h2><h3 id="5-1-唯一约束"><a href="#5-1-唯一约束" class="headerlink" title="5.1 唯一约束"></a>5.1 唯一约束</h3><ul><li><p>概念</p><p>唯一约束用于保证列中所有数据各不相同</p></li><li><p>语法</p><ul><li><p>添加约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时添加唯一约束</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>   列名 数据类型 <span class="token keyword">unique</span> <span class="token punctuation">[</span><span class="token keyword">auto_increment</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">-- AUTO_INCREMENT: 当不指定值时自动增长</span>   …<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>   列名 数据类型<span class="token punctuation">,</span>   …   <span class="token punctuation">[</span><span class="token keyword">constraint</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>约束名称<span class="token punctuation">]</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>列名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 建完表后添加唯一约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段名 数据类型 <span class="token keyword">unique</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a>5.2</h3><h3 id="5-3-默认约束"><a href="#5-3-默认约束" class="headerlink" title="5.3  默认约束"></a>5.3  默认约束</h3><ul><li><p>概念</p><p>保存数据时，未指定值则采用默认值</p></li><li><p>语法</p><ul><li><p>添加约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时添加默认约束</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>   列名 数据类型 <span class="token keyword">default</span> 默认值<span class="token punctuation">,</span>   …<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 建完表后添加默认约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">alter</span> 列名 <span class="token keyword">set</span> <span class="token keyword">default</span> 默认值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">alter</span> 列名 <span class="token keyword">drop</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="5-4"><a href="#5-4" class="headerlink" title="5.4"></a>5.4</h3><h3 id="5-5-外键约束"><a href="#5-5-外键约束" class="headerlink" title="5.5 外键约束"></a>5.5 外键约束</h3><ul><li>添加外键约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表时添加外键约束</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>   列名 数据类型<span class="token punctuation">,</span>   …   <span class="token punctuation">[</span><span class="token keyword">constraint</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>外键名称<span class="token punctuation">]</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>外键列名<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 建完表后添加外键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">constraint</span> 外键名称 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>外键字段名称<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>删除外键约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> 外键名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2022/11/11/er-cha-shu/"/>
      <url>/2022/11/11/er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202211112258628.png" alt="image-20221031215819429" style="zoom:50%;" /><p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202211112258365.png" alt="image-20221031220006196"></p><h3 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">BTreeNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    BTreeNode <span class="token operator">*</span>left<span class="token punctuation">;</span>    BTreeNode <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span>BT<span class="token punctuation">)</span><span class="token comment">//前序遍历</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BT <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> BT<span class="token operator">-></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InOrder</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span>BT<span class="token punctuation">)</span><span class="token comment">//中序遍历</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BT <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> BT<span class="token operator">-></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span>BT<span class="token punctuation">)</span><span class="token comment">//后序遍历</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BT <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> BT<span class="token operator">-></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//按层遍历的思想：创建队列二叉树指针数组，先放入根节点，然后循环判断</span><span class="token keyword">void</span> <span class="token function">LevelOrder</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span>BT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> MaxSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    BTreeNode <span class="token operator">*</span>q<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    BTreeNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BT <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//将根节点放入队列中</span>    <span class="token punctuation">&#123;</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize<span class="token punctuation">;</span>        q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> BT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">!=</span> rear<span class="token punctuation">)</span><span class="token comment">//当队列不为空时，删除并临时储存输出队首元素，若队首元素有左右孩子则放入</span>    <span class="token punctuation">&#123;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//临时储存队首元素</span>        cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment">//输出删除的队首元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize<span class="token punctuation">;</span>            q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize<span class="token punctuation">;</span>            q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建立二叉树"><a href="#建立二叉树" class="headerlink" title="建立二叉树"></a>建立二叉树</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// a是广义表数组首地址</span><span class="token keyword">void</span> <span class="token function">CreateBTree</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span><span class="token operator">&amp;</span>BT<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> MaxSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//栈数组的长度要大于等于二叉树的深度减一，因为最后一个孩子不会进栈</span>    BTreeNode <span class="token operator">*</span>s<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//栈二叉树指针数组</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//栈顶指针</span>    BT <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>              <span class="token comment">//建立二叉树时要将根节点置空</span>    BTreeNode <span class="token operator">*</span>p<span class="token punctuation">;</span>           <span class="token comment">//指向二叉结点的指针</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>                  <span class="token comment">// k=1时处理左子树，k=2时处理右子树</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token char">' '</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'('</span><span class="token operator">:</span>            <span class="token comment">//说明是左孩子，要将其父母结点放入栈，将k=1为连接左孩子做准备</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> MaxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空间不足"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                exit<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>            k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">')'</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串错误"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                exit<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            top<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//连接完左右孩子的父母结点出栈</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">','</span><span class="token operator">:</span>            <span class="token comment">//说明是右孩子，此时父母结点已放入栈，将k=2为连接右孩子做准备</span>            k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">//这步是创建二叉树结点，链接父母结点</span>            <span class="token comment">//如果是数据，创建二叉树结点</span>            p <span class="token operator">=</span> new BTreeNode<span class="token punctuation">;</span>            p<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>left <span class="token operator">=</span> p<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BT <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                BT <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                    s<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">-></span>left <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    s<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">-></span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出二叉树-广义表"><a href="#输出二叉树-广义表" class="headerlink" title="输出二叉树(广义表)"></a>输出二叉树(广义表)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PrintTree</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span>BST<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>BST<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>BST<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>left<span class="token operator">||</span>BST<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"("</span><span class="token punctuation">;</span><span class="token function">PrintTree</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出左子树</span><span class="token keyword">if</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//若右子树不为空首先输出逗号</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">","</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">PrintTree</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出右子树</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">")"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span><span class="token operator">&amp;</span>BST<span class="token punctuation">,</span> ElemType item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BST <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        BTreeNode <span class="token operator">*</span>p <span class="token operator">=</span> new BTreeNode<span class="token punctuation">;</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> item<span class="token punctuation">;</span>        p<span class="token operator">-></span>left <span class="token operator">=</span> p<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        BST <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> BST<span class="token operator">-></span>data<span class="token punctuation">)</span>        <span class="token function">Insert</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>left<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">Insert</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>right<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">Delete</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span><span class="token operator">&amp;</span>BST<span class="token punctuation">,</span> ElemType item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BST <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//二叉树为空结束</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> BST<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token comment">//待删除元素小于树根结点值，继续在左子树中删除</span>        <span class="token keyword">return</span> <span class="token function">Delete</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>left<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">></span> BST<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token comment">//待删除元素大于树根结点值，继续在右子树中删除</span>        <span class="token keyword">return</span> <span class="token function">Delete</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>right<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    BTreeNode <span class="token operator">*</span>temp <span class="token operator">=</span> BST<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BST<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//待删除元素等于树根结点值且左子树为空，将右子树作为整个树并返回真</span>    <span class="token punctuation">&#123;</span>        BST <span class="token operator">=</span> BST<span class="token operator">-></span>right<span class="token punctuation">;</span>        delete temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>BST<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//待删除元素等于树根结点值且右子树为空，将左子树作为整个树并返回真</span>    <span class="token punctuation">&#123;</span>        BST <span class="token operator">=</span> BST<span class="token operator">-></span>left<span class="token punctuation">;</span>        delete temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token comment">//待删除元素等于树根结点值且左、右子树均不为空时的处理情况</span>    <span class="token punctuation">&#123;</span><span class="token comment">//中序前驱结点就是左孩子结点时，把左孩子结点值赋给树根结点，然后从左子树中删除根结点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BST<span class="token operator">-></span>left<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            BST<span class="token operator">-></span>data <span class="token operator">=</span> BST<span class="token operator">-></span>left<span class="token operator">-></span>data<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">Delete</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>left<span class="token punctuation">,</span> BST<span class="token operator">-></span>left<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">/*找出中序前驱结点，即左子树的右下角结点，把该结点值赋给树根结点，然后从以中序前驱结点为根的树上删除根结点*/</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            BTreeNode <span class="token operator">*</span>p <span class="token operator">=</span> BST<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                p <span class="token operator">=</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span>            BST<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">Delete</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">Find</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span>BST<span class="token punctuation">,</span> ElemType item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BST <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> BST<span class="token operator">-></span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> BST<span class="token operator">-></span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">Find</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>left<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">Find</span><span class="token punctuation">(</span>BST<span class="token operator">-></span>right<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆同一般二叉树一样既可采用顺序存储，也可采用链接存储。但是由于堆是一棵完全二叉树，所以适宜采用顺序存储，这样才能充分利用其存储空间。</p><p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202211112258975.png" alt="image-20221101141444280"></p><p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202211112259565.png" alt="image-20221101141520603"></p><p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202211131634317.png" alt="image-20221101144103810"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Heap</span><span class="token punctuation">&#123;</span>ELemType<span class="token operator">*</span> heap<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">int</span> MaxSize<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入元素-1"><a href="#插入元素-1" class="headerlink" title="插入元素"></a>插入元素</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*插入堆的最后一个位置len(这是堆的长度，也是新元素插入的下标位置),比较双亲元素与新插入元素的大小，比如小根堆，如果新元素item小于双亲元素(放在循环里，因为双亲还有双亲，直到求双亲位置为0，也就是根节点的时候停止)，让双亲后移，最后插入*/</span><span class="token keyword">void</span> <span class="token function">InsertHeap</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>HBT<span class="token punctuation">,</span> ElemType item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> HBT<span class="token punctuation">.</span>len<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> item<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    HBT<span class="token punctuation">.</span>len<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">ElemType <span class="token function">DeieteHeap</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>HBT<span class="token punctuation">)</span><span class="token comment">// 从小根堆HBT中删除堆顶元素并返回</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token punctuation">.</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 若为空堆,则显示出错误信息并退出运行</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"堆为空，退出运行! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ElemType temp <span class="token operator">=</span> HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将堆顶元素暂存temp以便返回</span>    HBT<span class="token punctuation">.</span>len<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment">// 堆的长度减1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token punctuation">.</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>                <span class="token comment">// 若删除操作后变为空堆则返回</span>    ElemType x <span class="token operator">=</span> HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>HBT<span class="token punctuation">.</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 将待调整的堆尾元素暂存x中</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 用i指向待调整元素的位置，初始指向堆顶位置</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 用j指向i的左孩子位置，初始指向下标1的位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> HBT<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 寻找待调整元素的最终位置</span>        <span class="token comment">// 若右孩子存在并且较小，应使j指向右孩子</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> HBT<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 若条件成立则调整结束，退出循环</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token comment">// 孩子元素上移到双亲位置</span>        HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 使i和j分别指向下一层结点</span>        i <span class="token operator">=</span> j<span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 把待调整元素放到最终位置</span>    HBT<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment">// 返回原堆顶元素</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202211112259803.png" alt="image-20221111220301960" style="zoom:50%;" /><h4 id="构造哈夫曼树"><a href="#构造哈夫曼树" class="headerlink" title="构造哈夫曼树"></a>构造哈夫曼树</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">BTreeNode <span class="token operator">*</span><span class="token function">CreateHuffman</span><span class="token punctuation">(</span>ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">// 根据数组a中n个权值建立一棵哈夫曼树，返回树根指针</span><span class="token punctuation">&#123;</span>    BTreeNode <span class="token operator">*</span><span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token comment">// 动态分配一个由b指向的指针数组</span>    b <span class="token operator">=</span> new BTreeNode <span class="token operator">*</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token comment">// 初始化b指针数组，使每个指针元素指向a数组中对应元素的结点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> new BTreeNode<span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>left <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 进行n-1次循环建立哈夫曼树for ( i-1 ; i&lt;n; i++)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 用k1表示森林中具有最小权值的树根结点的下标//用k2表示森林中具有次最小权值的树根结点的下标</span>        <span class="token keyword">int</span> k1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k2<span class="token punctuation">;</span><span class="token comment">// 让 k1初始指向森林中第一棵树，k2初始指向森林中第二棵树</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> k1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                k1 <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                k2 <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 从当前森林中求出最小权值树和次最小权值树</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> k2<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>data <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token operator">-></span>data<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    k2 <span class="token operator">=</span> k1<span class="token punctuation">;</span>                    k1 <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>data <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>k2<span class="token punctuation">]</span><span class="token operator">-></span>data<span class="token punctuation">)</span>                    k2 <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 由最小权值树和次最小权值树建立一棵新树，q指向树根结点</span>        q <span class="token operator">=</span> new BTreeNode<span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> b<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token operator">-></span>data <span class="token operator">+</span> b<span class="token punctuation">[</span>k2<span class="token punctuation">]</span><span class="token operator">-></span>data<span class="token punctuation">;</span>        q<span class="token operator">-></span>left <span class="token operator">=</span> b<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>right <span class="token operator">=</span> b<span class="token punctuation">[</span>k2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 将指向新树的指针赋给b指针数组中k1位置，k2位置置为空</span>        b<span class="token punctuation">[</span>k1<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">;</span>        b<span class="token punctuation">[</span>k2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">;</span>    <span class="token comment">// 删除动态建立的数组</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span>    <span class="token comment">// 返回整个哈夫曼树的树根指针</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="求带权路径长度"><a href="#求带权路径长度" class="headerlink" title="求带权路径长度"></a>求带权路径长度</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">ElemType <span class="token function">WeightPathLength</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span>FBT<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token comment">// 根据FBT指针所指向的哈夫曼树求出带权路径长度，len初值为0</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>FBT <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 空树则返回0</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 访问到叶子结点时返回该结点的带权路径长度，其中值参len//保存当前被访问结点的路径长度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FBT<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> FBT<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> FBT<span class="token operator">-></span>data <span class="token operator">*</span> len<span class="token punctuation">;</span>        <span class="token comment">// 访问到非叶子结点时进行递归调用，返回左、右子树的带权</span>        <span class="token comment">// 路径长度之和，向下深入一层时len值增1</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">WeightPathLength</span><span class="token punctuation">(</span>FBT<span class="token operator">-></span>left<span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">WeightPathLength</span><span class="token punctuation">(</span>FBT<span class="token operator">-></span>right<span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="求哈夫曼编码"><a href="#求哈夫曼编码" class="headerlink" title="求哈夫曼编码"></a>求哈夫曼编码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HuffManCoding</span><span class="token punctuation">(</span>BTreeNode <span class="token operator">*</span>FBT<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token comment">// 根据FBT指针所指向的哈夫曼树输出每个叶子的编码,len初值为0</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数组的长度要至少等于哈夫曼树的深度减1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>FBT <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 访问到叶子结点时输出其保存在数组a中的0和1序列编码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FBT<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> FBT<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结点权值为"</span> <span class="token operator">&lt;&lt;</span> FBT<span class="token operator">-></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">"的编码:"</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*访问到非叶子结点时分别向左、右子树递归调用，并分别把分支上        的0、1编码保存到数组a的对应元素中，向下深入一层时len值增1*/</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">HuffManCoding</span><span class="token punctuation">(</span>FBT<span class="token operator">-></span>left<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">HuffManCoding</span><span class="token punctuation">(</span>FBT<span class="token operator">-></span>right<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202211112259959.png" alt="image-20221111214702403" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202211112259250.png" alt="image-20221111184800282" style="zoom:50%;" /><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TTreeNode</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 定义带线索的二叉搜索树的结点类型</span>    ElemType data<span class="token punctuation">;</span>    <span class="token comment">// 值域</span>    bool ltag<span class="token punctuation">,</span> rtag<span class="token punctuation">;</span>    <span class="token comment">// 线索标志域</span>    TTreeNode <span class="token operator">*</span>left<span class="token punctuation">;</span>    <span class="token comment">// 左指针域</span>    TTreeNode <span class="token operator">*</span>right<span class="token punctuation">;</span>    <span class="token comment">// 右指针域</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建立中序线索"><a href="#建立中序线索" class="headerlink" title="建立中序线索"></a>建立中序线索</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InThread</span><span class="token punctuation">(</span>TTreeNode <span class="token operator">*</span>HBT<span class="token punctuation">,</span> TTreeNode <span class="token operator">*</span><span class="token operator">&amp;</span>pre<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// 当二叉树为空时结束递归</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token operator">-></span>ltag <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token comment">// 左子树非空时给左子树加中序线索</span>            <span class="token function">InThread</span><span class="token punctuation">(</span>HBT<span class="token operator">-></span>left<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>rtag <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token comment">// 给前驱结点加后继线索</span>            pre<span class="token operator">-></span>right <span class="token operator">=</span> HBT<span class="token punctuation">;</span> <span class="token comment">// 给当前结点加前驱线索</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            HBT<span class="token operator">-></span>ltag <span class="token operator">=</span> true<span class="token punctuation">;</span>            HBT<span class="token operator">-></span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// 给右指针域为空的结点加右线索标记</span>            HBT<span class="token operator">-></span>rtag <span class="token operator">=</span> true<span class="token punctuation">;</span>        pre <span class="token operator">=</span> HBT<span class="token punctuation">;</span><span class="token comment">// 把刚访问过的当前结点置为前驱结点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token operator">-></span>rtag <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token comment">// 右子树非空时给右子树加中序线索</span>            <span class="token function">InThread</span><span class="token punctuation">(</span>HBT<span class="token operator">-></span>right<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入元素，但不中序线索链接"><a href="#插入元素，但不中序线索链接" class="headerlink" title="插入元素，但不中序线索链接"></a>插入元素，但不中序线索链接</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertThreed</span><span class="token punctuation">(</span>TTreeNode <span class="token operator">*</span><span class="token operator">&amp;</span>HBT<span class="token punctuation">,</span> <span class="token keyword">const</span> ElemType <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 把新结点链接到已找到的插入位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        TTreeNode <span class="token operator">*</span>p <span class="token operator">=</span> new TTreeNode<span class="token punctuation">;</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> item<span class="token punctuation">;</span>        p<span class="token operator">-></span>left <span class="token operator">=</span> p<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>ltag <span class="token operator">=</span> p<span class="token operator">-></span>rtag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        HBT <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> HBT<span class="token operator">-></span>data<span class="token punctuation">)</span>    <span class="token comment">// 向左子树中插入元素</span>        <span class="token function">InsertThreed</span><span class="token punctuation">(</span>HBT<span class="token operator">-></span>left<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token comment">// 向右子树中插入元素</span>        <span class="token function">InsertThreed</span><span class="token punctuation">(</span>HBT<span class="token operator">-></span>right<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建立带线索域的二叉搜索树，但不中序线索链接"><a href="#建立带线索域的二叉搜索树，但不中序线索链接" class="headerlink" title="建立带线索域的二叉搜索树，但不中序线索链接"></a>建立带线索域的二叉搜索树，但不中序线索链接</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateThreed</span><span class="token punctuation">(</span>TTreeNode <span class="token operator">*</span><span class="token operator">&amp;</span>HBT<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">// 利用数组中的n个元素建立带线索域的二叉搜索树的算法</span><span class="token punctuation">&#123;</span>    HBT <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">InsertThreed</span><span class="token punctuation">(</span>HBT<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入元素，并中序线索链接"><a href="#插入元素，并中序线索链接" class="headerlink" title="插入元素，并中序线索链接"></a>插入元素，并中序线索链接</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertThreed1</span><span class="token punctuation">(</span>TTreeNode <span class="token operator">*</span><span class="token operator">&amp;</span>HBT<span class="token punctuation">,</span> <span class="token keyword">const</span> ElemType <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 为新结点寻找插入位置</span>    TTreeNode <span class="token operator">*</span>t <span class="token operator">=</span> HBT<span class="token punctuation">,</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        parent <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> t<span class="token operator">-></span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>ltag <span class="token operator">-=</span> false<span class="token punctuation">)</span>                t <span class="token operator">=</span> t<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token keyword">else</span>                t <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>rtag <span class="token operator">=</span> <span class="token operator">-</span>false<span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token keyword">else</span>            t <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 建立值为item的新结点</span>    TTreeNode <span class="token operator">*</span>p <span class="token operator">=</span> new TTreeNode<span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> item<span class="token punctuation">;</span>    p<span class="token operator">-></span>ltag <span class="token operator">=</span> p<span class="token operator">-></span>rtag <span class="token operator">=</span> true<span class="token punctuation">;</span> <span class="token comment">// 叶子结点的左、右孩子指针均为线索</span>    <span class="token comment">// 将新结点插入到线索二叉搜索树HBT中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// 作为树根结点插入</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>left <span class="token operator">=</span> p<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        HBT <span class="token operator">-</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> parent<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token comment">// 作为左孩子结点插入</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>left <span class="token operator">-</span> parent<span class="token operator">-></span>left<span class="token punctuation">;</span> <span class="token comment">// 双亲的前驱成为新结点前驱</span>        parent<span class="token operator">-></span>ltag <span class="token operator">=</span> false<span class="token punctuation">;</span>   <span class="token comment">// 置双亲的左线索标志域为假</span>        parent<span class="token operator">-></span>left <span class="token operator">=</span> p<span class="token punctuation">;</span>       <span class="token comment">// 新结点链接为双亲的左孩子</span>        p<span class="token operator">-></span>right <span class="token operator">-</span> parent<span class="token punctuation">;</span>      <span class="token comment">// 双亲结点成为新结点的后继</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token comment">// 作为右孩子结点插入</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>right <span class="token operator">=</span> parent<span class="token operator">-></span>right<span class="token punctuation">;</span> <span class="token comment">//  双亲的后继成为新结点后继</span>        parent<span class="token operator">-></span>rtag <span class="token operator">=</span> false<span class="token punctuation">;</span>     <span class="token comment">// 置双亲的右线索标志域为假</span>        parent<span class="token operator">-></span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment">// 新结点链接为双亲的右孩子</span>        p<span class="token operator">-></span>left <span class="token operator">=</span> parent<span class="token punctuation">;</span>         <span class="token comment">// 双亲结点成为新结点的前驱</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建立中序线索二叉树"><a href="#建立中序线索二叉树" class="headerlink" title="建立中序线索二叉树"></a>建立中序线索二叉树</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateThreed1</span><span class="token punctuation">(</span>TTreeNode <span class="token operator">*</span><span class="token operator">&amp;</span>HBT<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">// 利用数组中的n个元素建立带线索的二叉搜索树的算法</span><span class="token punctuation">&#123;</span>    HBT <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">InsertThreed1</span><span class="token punctuation">(</span>HBT<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="返回p结点的中继后继结点"><a href="#返回p结点的中继后继结点" class="headerlink" title="返回p结点的中继后继结点"></a>返回p结点的中继后继结点</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">TTreeNode <span class="token operator">*</span><span class="token function">InorderNext</span><span class="token punctuation">(</span>TTreeNode <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>rtag <span class="token operator">==</span> true<span class="token punctuation">)</span>        <span class="token keyword">return</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>ltag <span class="token operator">==</span> false<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中序线索遍历"><a href="#中序线索遍历" class="headerlink" title="中序线索遍历"></a>中序线索遍历</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ThInorder</span><span class="token punctuation">(</span>TTreeNode <span class="token operator">*</span>HBT<span class="token punctuation">)</span><span class="token comment">// 按中序线索遍历二叉树HBT</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>HBT<span class="token operator">-></span>ltag <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token comment">// 查找出中序遍历中的第一个结点</span>            HBT <span class="token operator">=</span> HBT<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> HBT<span class="token operator">-></span>data <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span> <span class="token comment">// 输出结点的值</span>            HBT <span class="token operator">=</span> <span class="token function">InorderNext</span><span class="token punctuation">(</span>HBT<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 查找出HBT结点的中序后继结点</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>HBT <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当HT为空时算法结束</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出二叉搜索树-广义表"><a href="#输出二叉搜索树-广义表" class="headerlink" title="输出二叉搜索树(广义表)"></a>输出二叉搜索树(广义表)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PrintTTree1</span><span class="token punctuation">(</span>TTreeNode <span class="token operator">*</span>HBT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 输出线索二叉树的广义表表示</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// 树为空时结束递归,否则执行如下操作</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> HBT<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment">// 输出根结点的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token operator">-></span>ltag <span class="token operator">-=</span> false <span class="token operator">||</span> HBT<span class="token operator">-></span>rtag <span class="token operator">==</span> false<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token char">'('</span><span class="token punctuation">;</span> <span class="token comment">// 输出左括号</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token operator">-></span>ltag <span class="token operator">==</span> false<span class="token punctuation">)</span>                <span class="token function">PrintTTree1</span><span class="token punctuation">(</span>HBT<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出左子树</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>HBT<span class="token operator">-></span>rtag <span class="token operator">==</span> false<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token char">','</span><span class="token punctuation">;</span>             <span class="token comment">// 若右子树不为空则首先输出逗号分隔符</span>                <span class="token function">PrintTTree1</span><span class="token punctuation">(</span>HBT<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出右子树</span>            <span class="token punctuation">&#125;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token char">')'</span><span class="token punctuation">;</span> <span class="token comment">// 输出右括号</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2022/10/14/java-fan-she/"/>
      <url>/2022/10/14/java-fan-she/</url>
      
        <content type="html"><![CDATA[<p>【注】：”!”开头为作者总结，请阅读完全文再看</p><h2 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h2><ul><li>是指在运行时去<strong>获取一个类的变量和方法信息</strong>。然后通过获取到的信息来创建对象，调用方法的一种机制。 由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展</li></ul><blockquote><p><strong>！直接创建Field对象和Method对象设置成员变量和调用私有方法</strong></p><p><strong>！暴力破解的时候别忘了用getDeclaredxxx，xxx为Constructor、Field或Method，更不要忘记取消检查访问权限</strong></p></blockquote><h2 id="获取Class类对象"><a href="#获取Class类对象" class="headerlink" title="获取Class类对象"></a>获取Class类对象</h2><ol><li>使用<strong>类的class属性</strong>来获取该类对应的Class对象。举例：Student.class将会返回Student类对应的Class对象</li><li>调用<strong>对象的getClass()方法</strong>，返回该对象所属类对应的Class对象，该方法是Object类中的方法，所有的Java对象都可以调用该方法</li><li>使用**Class类中的静态方法forName(String className)**，该方法需要传入字符串参数，该字符串参数的值是某个类的全路径，也就是完整包名的路径</li></ol><h2 id="反射获取构造方法"><a href="#反射获取构造方法" class="headerlink" title="反射获取构造方法"></a>反射获取构造方法</h2><p><code>Constructor&lt;?&gt;[] getConstructors​()</code> </p><blockquote><p>返回一个包含 Constructor对象的数组， Constructor对象反映了由该 Class对象表示的类的所有公共构造函数</p></blockquote><p><code>Constructor&lt;?&gt;[] getDeclaredConstructors​()</code> </p><blockquote><p>返回反映由该 Class对象表示的类声明的所有构造函数的 Constructor对象的数组</p></blockquote><p><code>Constructor&lt;T&gt; getConstructor​(Class&lt;?&gt;... parameterTypes)</code></p><blockquote><p>返回一个 Constructor对象，该对象反映由该 Class对象表示的类的指定公共构造函数</p></blockquote><p><code>Constructor&lt;T&gt; getDeclaredConstructor​(Class&lt;?&gt;... parameterTypes)</code></p><blockquote><p>返回一个 Constructor对象，该对象反映由此 Class对象表示的类或接口的指定构造函数    </p></blockquote><p><strong>Constructor提供了一个类的单个构造函数的信息和访问权限<code>T newInstance​(Object... initargs)</code></strong> </p><blockquote><p>使用由此 Constructor对象表示的构造函数，使用指定的初始化参数来创建和初始化构造函数的声明类的新实例</p><p><strong>此方法内参数要和Class构造方法参数相符</strong></p></blockquote><p><strong>举个栗子</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token class-name">PrintName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Cat&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Class对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cat <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"pers.lusanjiu.Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//public Cat(String name, int age, String color)</span>        <span class="token comment">//获取Class对象的构造方法</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用Class对象的构造方法创建对象</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"橘猫"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"暖黄色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Cat&#123;name='橘猫', age=5, color='暖黄色'&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="暴力反射"><a href="#暴力反射" class="headerlink" title="暴力反射"></a>暴力反射</h3><p><code>public void setAccessible​(boolean flag)</code>:值为true，取消访问权限检查</p><p><strong>！Constructor、Field、Method对象均有此方法</strong></p><p>示例：Constructor的暴力反射</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cat <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"pers.lusanjiu.Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取私有构造方法</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取消私有构造方法的访问权限</span>        con<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用私有构造方法创建对象</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"蓝胖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Cat&#123;name='蓝胖', age=0, color='null'&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射获取成员变量"><a href="#反射获取成员变量" class="headerlink" title="反射获取成员变量"></a>反射获取成员变量</h2><p><code>Field[] getFields​()</code> </p><blockquote><p>返回一个包含 Field对象的数组， Field对象反映由该 Class对象表示的类或接口的所有可访问的公共字段</p></blockquote><p><code>Field[] getDeclaredFields​()</code></p><blockquote><p>返回一个 Field对象的数组，反映了由该 Class对象表示的类或接口声明的所有字段</p></blockquote><p><code>Field getField​(String name)</code> </p><blockquote><p>返回一个 Field对象，该对象反映由该 Class对象表示的类或接口的指定公共成员字段</p></blockquote><p><code>Field getDeclaredField​(String name)</code> </p><blockquote><p>返回一个 Field对象，该对象反映由该 Class对象表示的类或接口的指定声明字段</p></blockquote><p><strong>Field提供有关类或接口的单个字段的信息和动态访问</strong><code>void set​(Object obj, Object value)</code> </p><blockquote><p>将指定的对象参数中由此Field对象表示的字段设置为指定的新值</p><p>obj：设置Field的对象，value：赋给变量的值</p></blockquote><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cat <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"pers.lusanjiu.Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取字段，取消检查权限，设置对象变量</span>        <span class="token class-name">Field</span> name <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"白胖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Cat&#123;name='白胖', age=0, color='null'&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射获取成员方法"><a href="#反射获取成员方法" class="headerlink" title="反射获取成员方法"></a>反射获取成员方法</h2><p><code>Method[] getMethods​()</code> </p><blockquote><p>返回一个包含方法对象的数组， 方法对象反映由该 Class对象表示的类或接口的<strong>所有公共方法</strong>，包括由类或接口声明的对象以及从超类和超级接口继承的类</p></blockquote><p><code>Method[] getDeclaredMethods​()</code> </p><blockquote><p>返回一个包含方法对象的数组， 方法对象反映由 Class对象表示的类或接口的所有声明方法，包括public，protected，default（package）访问和私有方法，但不包括继承方法</p></blockquote><p><code>Method getMethod​(String name, Class&lt;?&gt;... parameterTypes)</code> </p><blockquote><p>返回一个方法对象，该对象反映由该 Class对象表示的类或接口的指定公共成员方法</p></blockquote><p><code>Method getDeclaredMethod​(String name, Class&lt;?&gt;... parameterTypes)</code></p><blockquote><p>返回一个方法对象，它反映此表示的类或接口的指定声明的方法 Class对象</p></blockquote><p>**在类或接口上提供有关单一方法的信息和访问权限<code>Object invoke​(Object obj, Object... args)</code> **</p><blockquote><p>在具有指定参数的指定对象上调用此 方法对象表示的基础方法，</p><p>Object：返回值类型，obj：调用方法的对象，args：方法需要的参数</p></blockquote><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cat <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"pers.lusanjiu.Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取字段，取消检查权限，设置对象变量</span>        <span class="token class-name">Field</span> name <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"白胖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取方法，取消检查权限，调用对象方法</span>        <span class="token class-name">Method</span> printName <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"PrintName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printName<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//白胖</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射的案例"><a href="#反射的案例" class="headerlink" title="反射的案例"></a>反射的案例</h2><ol><li><strong>越过泛型检查</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token comment">/*    练习1：我有一个ArrayList&lt;Integer>集合，现在我想在这个集合中添加一个字符串数据，如何实现？ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建集合</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        array.add(10);</span><span class="token comment">//        array.add(20);</span><span class="token comment">//        array.add("hello");</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>运行配置文件中指定类的指定方法</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token comment">/*    练习2：通过配置文件运行类中的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加载数据</span>        <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"class.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        class.txt里有：            className=pers.lusanjiu.Cat            methodName=PrintName         */</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过反射来使用</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pers.lusanjiu.Cat</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//PrintName</span>        m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流</title>
      <link href="/2022/10/10/stream-liu/"/>
      <url>/2022/10/10/stream-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><h3 id="Stream流的常见生成方式"><a href="#Stream流的常见生成方式" class="headerlink" title="Stream流的常见生成方式"></a><strong>Stream流的常见生成方式</strong></h3><p>  1:Collection体系的集合可以使用默认方法stream()生成流<code> default Stream&lt;E&gt; stream()</code><br>  2:Map体系的集合间接的生成流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keyStream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> valueStream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entryStream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  3:数组可以通过Stream接口的静态方法of(T… values)生成流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数组可以通过Stream接口的静态方法of(T... values)生成流</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArray <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strArrayStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strArrayStream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> intStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Stream流常用方法"><a href="#Stream流常用方法" class="headerlink" title="Stream流常用方法"></a>Stream流常用方法</h3><table><thead><tr><th align="center">方法名称</th><th align="center">方法作用</th><th align="center">方法种类</th><th align="center">是否支持链式调用</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计个数</td><td align="center">终结方法</td><td align="center">否</td></tr><tr><td align="center">forEach</td><td align="center">逐一处理</td><td align="center">终结方法</td><td align="center">否</td></tr><tr><td align="center">filter</td><td align="center">过滤</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">limit</td><td align="center">取用前几个</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">skip</td><td align="center">跳过前几个</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">map</td><td align="center">映射</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">concat</td><td align="center">组合</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">sorted</td><td align="center">排序</td><td align="center">函数拼接</td><td align="center">是</td></tr></tbody></table><h4 id="1-filter"><a href="#1-filter" class="headerlink" title="1. filter"></a>1. filter</h4><blockquote><p>Stream<T> filter(Predicate predicate)：用于对流中的数据进行过滤<br>    Predicate接口中的方法boolean test(T t)：对给定的参数进行判断，返回一个布尔值</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个集合，存储多个字符串元素</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张曼玉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王祖贤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求1：把list集合中以张开头的元素在控制台输出</span><span class="token comment">//        list.stream().filter((String s) -> &#123;</span><span class="token comment">//            return s.startsWith("张");</span><span class="token comment">//        &#125;).forEach(System.out::println);</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求2：把list集合中长度为3的元素在控制台输出</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求3：把list集合中以张开头的，长度为3的元素在控制台输出</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-limit-amp-skip"><a href="#2-limit-amp-skip" class="headerlink" title="2. limit &amp; skip"></a>2. limit &amp; skip</h4><blockquote><p>Stream<T> limit(long maxSize)：返回此流中的元素组成的流，截取前指定参数个数的数据<br>    Stream<T> skip(long n)：跳过指定参数个数的数据，返回由该流的剩余元素组成的流</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个集合，存储多个字符串元素</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张曼玉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王祖贤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求1：取前3个数据在控制台输出</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求2：跳过3个元素，把剩下的元素在控制台输出</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求3：跳过2个元素，把剩下的元素中前2个在控制台输出</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-concat-amp-distinct"><a href="#3-concat-amp-distinct" class="headerlink" title="3.concat &amp; distinct"></a>3.concat &amp; distinct</h4><blockquote><p>static <T> Stream<T> concat(Stream a, Stream b)：合并a和b两个流为一个流<br>Stream<T> distinct()：返回由该流的不同元素（根据Object.equals(Object) ）组成的流</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个集合，存储多个字符串元素</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张曼玉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王祖贤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求1：取前4个数据组成一个流</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求2：跳过2个数据组成一个流</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求3：合并需求1和需求2得到的流，并把结果在控制台输出</span><span class="token comment">//        Stream.concat(s1,s2).forEach(System.out::println);</span>        <span class="token comment">//需求4：合并需求1和需求2得到的流，并把结果在控制台输出，要求字符串元素不能重复</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-sorted"><a href="#4-sorted" class="headerlink" title="4. sorted"></a>4. sorted</h4><blockquote><p>Stream<T> sorted()：返回由此流的元素组成的流，根据自然顺序排序<br>Stream<T> sorted(Comparator comparator)：返回由该流的元素组成的流，根据提供的Comparator进行排序<br>Comparator接口中的方法   int compare(T o1, T o2)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个集合，存储多个字符串元素</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"linqingxia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zhangmanyu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"wangzuxian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"liuyan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zhangmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zhangwuji"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求1：按照字母顺序把数据在控制台输出</span><span class="token comment">//        list.stream().sorted().forEach(System.out::println);</span>        <span class="token comment">//需求2：按照字符串长度把数据在控制台输出</span><span class="token comment">//        list.stream().sorted((s1, s2) -> s1.length() - s2.length()).forEach(System.out::println);</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num2 <span class="token operator">=</span> num<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">:</span>num<span class="token punctuation">;</span>            <span class="token keyword">return</span> num2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-map-amp-mapToInt"><a href="#5-map-amp-mapToInt" class="headerlink" title="5. map &amp; mapToInt"></a>5. map &amp; mapToInt</h4><blockquote><p><R> Stream<R> map(Function mapper)：返回由给定函数应用于此流的元素的结果组成的流<br>        Function接口中的方法    R apply(T t)<br>    IntStream mapToInt(ToIntFunction mapper)：返回一个IntStream其中包含将给定函数应用于此流的元素的结果<br>        IntStream：表示原始 int 流<br>        ToIntFunction接口中的方法     int applyAsInt(T value)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo05</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个集合，存储多个字符串元素</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"40"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求：将集合中的字符串数据转换为整数之后在控制台输出</span><span class="token comment">//        list.stream().map(s -> Integer.parseInt(s)).forEach(System.out::println);</span><span class="token comment">//        list.stream().map(Integer::parseInt).forEach(System.out::println);</span><span class="token comment">//        list.stream().mapToInt(Integer::parseInt).forEach(System.out::println);</span>        <span class="token comment">//int sum() 返回此流中元素的总和</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-forEach-amp-count"><a href="#6-forEach-amp-count" class="headerlink" title="6. forEach &amp; count"></a>6. forEach &amp; count</h4><blockquote><p> Stream流的常见终结操作方法:<br>     void forEach(Consumer action)：对此流的每个元素执行操作<br>     Consumer接口中的方法 void accept(T t)：对给定的参数执行此操作<br>     long count()：返回此流中的元素数</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个集合，存储多个字符串元素</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张曼玉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王祖贤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求1：把集合中的元素在控制台输出</span><span class="token comment">//        list.stream().forEach(System.out::println);</span>        <span class="token comment">//需求2：统计集合中有几个以张开头的元素，并把统计结果在控制台输出</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-collect"><a href="#7-collect" class="headerlink" title="7. collect"></a>7. collect</h4><blockquote><p>Stream流的收集方法<br>​        R collect(Collector collector)</p><p>它是通过工具类Collectors提供了具体的收集方式<br>        public static <T> Collector toList()：把元素收集到List集合中<br>        public static <T> Collector toSet()：把元素收集到Set集合中<br>        public static Collector toMap(Function keyMapper,Function valueMapper)：把元素收集到Map集合中</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建List集合对象</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张曼玉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王祖贤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        //需求1：得到名字为3个字的流        Stream&lt;String> listStream = list.stream().filter(s -> s.length() == 3);        //需求2：把使用Stream流操作完毕的数据收集到List集合中并遍历        List&lt;String> names = listStream.collect(Collectors.toList());        for(String name : names) &#123;            System.out.println(name);        &#125;        */</span>        <span class="token comment">//创建Set集合对象</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        //需求3：得到年龄大于25的流        Stream&lt;Integer> setStream = set.stream().filter(age -> age > 25);        //需求4：把使用Stream流操作完毕的数据收集到Set集合中并遍历        Set&lt;Integer> ages = setStream.collect(Collectors.toSet());        for(Integer age : ages) &#123;            System.out.println(age);        &#125;        */</span>        <span class="token comment">//定义一个字符串数组，每一个字符串数据由姓名数据和年龄数据组合而成</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArray <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"林青霞,30"</span><span class="token punctuation">,</span> <span class="token string">"张曼玉,35"</span><span class="token punctuation">,</span> <span class="token string">"王祖贤,33"</span><span class="token punctuation">,</span> <span class="token string">"柳岩,25"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//需求5：得到字符串中年龄数据大于28的流</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需求6：把使用Stream流操作完毕的数据收集到Map集合中并遍历，字符串中的姓名作键，年龄作值</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> arrayStream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java IO</title>
      <link href="/2022/10/09/java-io/"/>
      <url>/2022/10/09/java-io/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Java-IO介绍"><a href="#1-Java-IO介绍" class="headerlink" title="1. Java IO介绍"></a>1. Java IO介绍</h1><p>IO，即<code>in</code>和<code>out</code>，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道、网络连接。</p><p>Java 中是通过流处理IO 的，<strong>那么什么是流</strong>？</p><p>流（<code>Stream</code>），是一个抽象的概念，是指<strong>一连串的数据</strong>（字符或字节），是以<strong>先进先出的方式发送信息的通道。</strong></p><p>当程序需要读取数据的时候，就会开启一个通向数据源的流，数据传输时就好像在这其中“流”动一样，而且方向唯一。</p><h2 id="IO流分类"><a href="#IO流分类" class="headerlink" title="IO流分类"></a>IO流分类</h2><p>IO流主要的分类方式有以下3种：</p><ol><li>按数据流的方向：输入流、输出流</li><li>按处理数据单位：字节流、字符流</li><li>按功能：节点流、处理流</li></ol><p><strong>1、输入流与输出流</strong></p><p>输入与输出是相对于应用程序而言的，比如文件读写，读取文件是输入流，写文件是输出流，这点很容易搞反。</p><p><strong>2、字节流与字符流</strong></p><p>字节流和字符流的用法几乎完全一样，区别在于</p><ol><li>字节流和字符流所操作的数据单元不同，字节流操作的单元是数据单元是<strong>8位</strong>的字节，字符流操作的是数据单元为<strong>16位</strong>的字符。</li><li>字节流可以处理一切文件，而字符流只能处理纯文本文件。</li><li><em>字节流本身没有缓冲区，缓冲字节流相对于字节流，效率提升非常高。而字符流本身就带有缓冲区，缓冲字符流相对于字符流效率提升就不是那么大了。</em></li></ol><p><strong>3、节点流和处理流</strong></p><p><strong>节点流</strong>：直接操作数据读写的流类，比如<code>FileInputStream</code></p><p><strong>处理流</strong>：对一个已存在的流的链接和封装，通过对数据进行处理为程序提供功能强大、灵活的读写功能，例如<code>BufferedInputStream</code>（缓冲字节流）</p><p>处理流和节点流应用了Java的装饰者设计模式。</p><p><strong>处理流是对节点流的封装，最终的数据处理还是由节点流完成的</strong>。</p><p>在诸多处理流中，有一个非常重要，那就是<strong>缓冲流</strong>。</p><p>程序与磁盘的交互相对于内存运算是很慢的，减少程序与磁盘的交互，是提升程序效率一种有效手段。缓冲流，就应用这种思路：普通流每次读写一个字节，而缓冲流在内存中设置一个缓存区，缓冲区先存储足够的待操作数据后，再与内存或磁盘进行交互。这样，在总数据量不变的情况下，通过提高每次交互的数据量，减少了交互次数。</p><p>缓冲流效率一定高吗？</p><blockquote><p>不一定，直接读写较长的字符串，缓冲流效率反而更低。要想对比普通字节流和缓冲字节流的效率差距，就要避免直接读写较长的字符串，用字节流和缓冲字节流分别复制文件的效率差异就很明显了。字符缓冲流效率上并没有明显提高，我们更多的是要使用它的<code>readLine()</code>和<code>newLine()</code>方法。</p></blockquote><h1 id="2-IO流"><a href="#2-IO流" class="headerlink" title="2 IO流"></a>2 IO流</h1><h2 id="2-2-字节流"><a href="#2-2-字节流" class="headerlink" title="2.2 字节流"></a>2.2 字节流</h2><p><code>InputStream</code>与<code>OutputStream</code>是两个抽象类，是字节流的基类，所有具体的字节流实现类都是分别继承了这两个类。</p><p><strong>1、FileInputStream、FileOutputStream（字节流）</strong></p><blockquote><p><strong>字节流的方式效率较低，不建议使用</strong></p></blockquote><ul><li><p>FileInputStream</p><blockquote><p>FileOutputStream构造方法类似）</p></blockquote></li></ul><table><thead><tr><th align="left">构造器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>FileInputStream(File file)</code></td><td align="left">通过打开与实际文件的连接来创建 <code>FileInputStream</code> ，该文件由文件系统中的 <code>File</code>对象 <code>file</code>命名。</td></tr><tr><td align="left"><code>FileInputStream(String name)</code></td><td align="left">通过打开与实际文件的连接来创建 <code>FileInputStream</code> ，该文件由文件系统中的路径名 <code>name</code>命名。</td></tr></tbody></table><p><strong>2、BufferedInputStream、BufferedOutputStream（缓冲字节流）</strong></p><blockquote><p>缓冲字节流是为高效率而设计的，真正的读写操作还是靠<code>FileOutputStream</code>和<code>FileInputStream</code>，所以其构造方法的参数是这两个类的对象。</p></blockquote><h2 id="2-3-字符流"><a href="#2-3-字符流" class="headerlink" title="2.3 字符流"></a>2.3 字符流</h2><p>与字节流类似，字符流也有两个抽象基类，分别是<code>Reader</code>和<code>Writer</code>。其他的字符流实现类都是继承了这两个类。</p><p><strong>1、InputStreamReader、OutputStreamWriter（字符流）</strong></p><blockquote><p><strong>字符流适用于文本文件的读写</strong>，<code>OutputStreamWriter</code>类其实也是借助<code>FileOutputStream</code>类实现的，故其构造方法是<code>FileOutputStream</code>的对象</p></blockquote><p><strong>2、字符流便捷类</strong></p><blockquote><p>Java提供了<code>FileWriter</code>和<code>FileReader</code>简化字符流的读写，<code>new FileWriter</code>等同于<code>new OutputStreamWriter(new FileOutputStream(file, true))</code></p><p><code>FileWriter</code>的构造方法参数如上文FileOutputStream</p></blockquote><p><strong>3、BufferedReader、BufferedWriter（字符缓冲流）</strong></p><blockquote><p>其构造方法是<code>FileWriter</code>的对象</p></blockquote><h2 id="2-4-对象序列化流与反序列化流"><a href="#2-4-对象序列化流与反序列化流" class="headerlink" title="2.4 对象序列化流与反序列化流"></a>2.4 对象序列化流与反序列化流</h2><p>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。</p><blockquote><p>序列化的类要实现Serializable接口，该接口时标记接口，不需要重写任何方法</p></blockquote><ul><li><p>序列化：将java对象转换为字节序列</p><ul><li><p>对象序列化流： <strong>ObjectOutputStream</strong></p><ul><li><p>构造方法<code>ObjectOutputStream(OutputStream out)</code> ：创建一个写入指定的OutputStream的 ObjectOutputStrea</p></li><li><p>序列化对象方法<code>void writeObject(Object obj) </code>：将指定的对象写入ObjectOutputStream</p></li></ul></li></ul></li></ul><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Student类已实现Serializable接口，成员变量有name,age,重写了toString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectOutputStreamDemo</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">//ObjectOutputStream(OutputStream out)：创建一个写入指定的OutputStream的ObjectOutputStream</span><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"myOtherStream\\oos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//void writeObject(Object obj)：将指定的对象写入ObjectOutputStream</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放资源</span>oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>反序列化：把字节序列回复为原先的java对象<ul><li>对象反序列化流： ObjectInputStream<ul><li>构造方法<code>ObjectInputStream(InputStream in)</code> ：创建从指定的InputStream读取的ObjectInputStream</li><li>反序列化对象方法<code>void readObject() </code>：从ObjectInputStream读取一个对象</li></ul></li></ul></li></ul><p>举例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectInputStreamDemo</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span><span class="token comment">//ObjectInputStream(InputStream in)：创建从指定的InputStream读取的ObjectInputStream</span>    <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"myOtherStream\\oos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Object readObject()：从ObjectInputStream读取一个对象</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h3><p>用对象序列化流序列化了一个对象后，假如我们修改了对象所属的类文件，读取数据会出问题，会抛出InvalidClassException异常</p><ul><li><p>解决方法:</p><ol><li><p>重新序列化</p></li><li><p>给对象所属的类加一个serialVersionUID</p><blockquote><p>private static final long serialVersionUID &#x3D; 42L;</p></blockquote></li></ol></li></ul><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><p>该关键字标记的成员变量不参与序列化过程</p><h1 id="3-IO流方法"><a href="#3-IO流方法" class="headerlink" title="3. IO流方法"></a>3. IO流方法</h1><h2 id="3-1-字节流方法"><a href="#3-1-字节流方法" class="headerlink" title="3.1 字节流方法"></a>3.1 字节流方法</h2><p><strong>字节输入流<code>InputStream</code>主要方法：</strong></p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>void read()</code></td><td align="center">从此输入流中读取一个数据字节</td></tr><tr><td align="center"><code>void read(byte[] b)</code></td><td align="center">从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中</td></tr><tr><td align="center"><code>void read(byte[] b, int off, int len)</code></td><td align="center">从此输入流中将最多 len 个字节的数据读入一个 byte 数组中</td></tr><tr><td align="center"><code>close()</code></td><td align="center">关闭此输入流并释放与该流关联的所有系统资源</td></tr></tbody></table><p><strong>字节输出流<code>OutputStream</code>主要方法：</strong></p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>void write(int b)</code></td><td align="center">将指定字节写入此文件输出流</td></tr><tr><td align="center"><code>void write(byte[] b)</code></td><td align="center">将 b.length 个字节从指定 byte 数组写入此文件输出流中</td></tr><tr><td align="center"><code>void write(byte[] b, int off, int len)</code></td><td align="center">将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此文件输出流</td></tr><tr><td align="center"><code>close()</code></td><td align="center">关闭此输入流并释放与该流关联的所有系统资源</td></tr></tbody></table><h2 id="3-2-字符流方法"><a href="#3-2-字符流方法" class="headerlink" title="3.2 字符流方法"></a>3.2 字符流方法</h2><p><strong>字符输入流<code>Reader</code>主要方法：</strong></p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>int read()</code></td><td align="center">一次读一个字符数据</td></tr><tr><td align="center"><code>int read(char[] cbuf)</code></td><td align="center">一次读一个字符数组数据</td></tr><tr><td align="center"><code>flush()</code></td><td align="center">刷新流，之后还可以继续写数据</td></tr><tr><td align="center"><code>close()</code></td><td align="center">关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td></tr></tbody></table><p><strong>字符输出流<code>Writer</code>主要方法：</strong></p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>void write(int c) </code></td><td align="center">写一个字符</td></tr><tr><td align="center"><code>void write(char[] cbuf)</code></td><td align="center">写入一个字符数组</td></tr><tr><td align="center"><code>void write(char[] cbuf, int off, int len)</code></td><td align="center">写入字符数组的一部分</td></tr><tr><td align="center"><code>void write(String str)</code></td><td align="center">写一个字符串</td></tr><tr><td align="center"><code>void write(String str, int off, int len)</code></td><td align="center">写一个字符串的一部分</td></tr><tr><td align="center"><code>flush()</code></td><td align="center">刷新流，之后还可以继续写数据</td></tr><tr><td align="center"><code>close()</code></td><td align="center">关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td></tr></tbody></table><p>另外，<strong>字符缓冲流还有两个独特的方法：</strong></p><ul><li><code>BufferedWriter</code>类<code>newLine()</code> ：<strong>写入一个行分隔符。这个方法会自动适配所在系统的行分隔符。</strong></li><li><code>BufferedReader</code>类<code>readLine()</code> ：读取一个文本行。</li></ul><h1 id="集合补充"><a href="#集合补充" class="headerlink" title="集合补充"></a>集合补充</h1><h2 id="Properties集合"><a href="#Properties集合" class="headerlink" title="Properties集合"></a>Properties集合</h2><ul><li>Properties介绍<ul><li>是一个Map体系的集合类 </li><li>Properties可以保存到流中或从流中加载 </li><li>属性列表中的每个键及其对应的值都是一个字符串</li></ul></li></ul><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>String</code></td><td align="left"><code>getProperty(String key)</code></td><td align="left">在此属性列表中搜索具有指定键的属性。</td></tr><tr><td align="left"><code>Object</code></td><td align="left"><code>setProperty(String key, String value)</code></td><td align="left">调用 <code>Hashtable</code>方法 <code>put</code> 。</td></tr><tr><td align="left"><code>Set&lt;String&gt;</code></td><td align="left"><code>stringPropertyNames()</code></td><td align="left">从此属性列表返回一组不可修改的键，其中键及其对应的值是字符串，如果尚未从主属性列表中找到相同名称的键，则包括默认属性列表中的不同键。</td></tr></tbody></table><h2 id="Properties和IO流相结合的方法"><a href="#Properties和IO流相结合的方法" class="headerlink" title="Properties和IO流相结合的方法"></a>Properties和IO流相结合的方法</h2><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>void</code></td><td align="left"><code>load(InputStream inStream)</code></td><td align="left">从输入字节流中读取属性列表（键和元素对）。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>load(Reader reader)</code></td><td align="left">以简单的面向行的格式从输入字符流中读取属性列表（键和元素对）。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>store(OutputStream out, String comments)</code></td><td align="left">将此 <code>Properties</code>表中的此属性列表（键和元素对）以适合使用 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Properties.html#load(java.io.InputStream)"><code>load(InputStream)</code></a>方法加载到 <code>Properties</code>表的格式写入输出流。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>store(Writer writer, String comments)</code></td><td align="left">将此 <code>Properties</code>表中的此属性列表（键和元素对）以适合使用 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Properties.html#load(java.io.Reader)"><code>load(Reader)</code></a>方法的格式写入输出字符流。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesDemo</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">//把集合中的数据保存到文件</span><span class="token comment">// myStore();</span><span class="token comment">//把文件中的数据加载到集合</span><span class="token function">myLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//void load(Reader reader)：</span><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"myOtherStream\\fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"003"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//void store(Writer writer, String comments)：</span><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"myOtherStream\\fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>fw<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File类</title>
      <link href="/2022/10/07/java-file-lei/"/>
      <url>/2022/10/07/java-file-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="相对路径特殊符号"><a href="#相对路径特殊符号" class="headerlink" title="相对路径特殊符号"></a>相对路径特殊符号</h2><p>在了解File类之前，我们先了解一下相对路径的有关符号表示:</p><p>在表示相对路径中，<strong>单点表示当前目录</strong>，<strong>双点表示上一级目录</strong>，<strong>反斜杠“&#x2F;”表示分隔目录</strong>；</p><p>相对路径特殊符号有以下几种表示意义：</p><blockquote><p>以“.&#x2F;”开头，代表当前目录和文件目录在同一个目录里，“.&#x2F;”也可以省略不写！<br>以”..&#x2F;“开头：向上走一级，代表目标文件在当前文件所在的上一级目录；<br>以”..&#x2F;..&#x2F;“开头：向上走两级，代表父级的父级目录，也就是上上级目录，再说明白点，就是上一级目录的上一级目录<br>以”&#x2F;”开头，代表根目录</p></blockquote><ul><li>绝对路径和相对路径的区别<ul><li>绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件。例如：E:\itcast\java.txt</li><li>相对路径：必须使用取自其他路径名的信息进行解释。例如：myFile\java.txt</li></ul></li></ul><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="1-1File类概述和构造方法"><a href="#1-1File类概述和构造方法" class="headerlink" title="1.1File类概述和构造方法"></a>1.1File类概述和构造方法</h2><ul><li><p>File类介绍 ：</p><ul><li>它是文件和目录路径名的抽象表示</li><li>文件和目录是可以通过File封装成对象的</li><li>对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。将来是要通过具体的操作把这个路径的内容转换为具体存在的。</li></ul></li><li><p>构造方法</p><table><thead><tr><th align="center">构造器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public File(String pathname)</td><td align="center">以<code>pathname</code>为路径创建<code>File</code>对象，可以是绝对路径或者相对路径，如果<code>pathname</code>是相对路径，则默认的当前路径在系统属性<code>user.dir</code>中存储。</td></tr><tr><td align="center">public File(String parent,String child)</td><td align="center">以<code>parent</code>为父路径，<code>child</code>为子路径创建File对象。</td></tr><tr><td align="center">public File(File parent,String child)</td><td align="center">根据一个父<code>File</code>对象和子文件路径创建<code>File</code>对象</td></tr></tbody></table></li></ul><h2 id="1-2File类创建功能"><a href="#1-2File类创建功能" class="headerlink" title="1.2File类创建功能"></a>1.2File类创建功能</h2><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean createNewFile()</td><td align="center">当具有该名称的文件不存在时，<strong>创建</strong>一个由该抽象路径名命名的<strong>新空文件</strong></td></tr><tr><td align="center">public boolean mkdir()</td><td align="center"><strong>创建</strong>由此抽象路径名命名的<strong>目录</strong></td></tr><tr><td align="center">public boolean mkdirs()</td><td align="center"><strong>创建</strong>由此抽象路径名命名的<strong>目录</strong>，包括任何必需但不存在的父目录</td></tr></tbody></table><h2 id="1-3File类判断和获取功能"><a href="#1-3File类判断和获取功能" class="headerlink" title="1.3File类判断和获取功能"></a>1.3File类判断和获取功能</h2><ul><li>判断功能：</li></ul><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean isDirectory()</td><td align="center">测试此抽象路径名表示的File<strong>是否为目录</strong></td></tr><tr><td align="center">public boolean isFile()</td><td align="center">测试此抽象路径名表示的File<strong>是否为文件</strong></td></tr><tr><td align="center">public boolean  exists()</td><td align="center">测试此抽象路径名表示的File<strong>是否存在</strong></td></tr></tbody></table><ul><li>获取功能</li></ul><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String getAbsolutePath()</td><td align="center">返回此抽象路径名的<strong>绝对路径名字符串</strong></td></tr><tr><td align="center">public String getPath()</td><td align="center">返回<strong>定义时的路径名字符串</strong>，（就是你写什么路径，他就返回什么路径）</td></tr><tr><td align="center">public String getName()</td><td align="center">返回由此抽象路径名表示的<strong>文件或目录的名称</strong></td></tr><tr><td align="center">public String[] <strong>list</strong>()</td><td align="center">返回此抽象路径名表示的<strong>目录中的文件和目录的名称字符串数组</strong></td></tr><tr><td align="center">public File[] <strong>listFiles</strong>()</td><td align="center">返回此抽象路径名表示的<strong>目录中的文件和目录的File对象数组</strong></td></tr></tbody></table><h2 id="1-4File类删除功能"><a href="#1-4File类删除功能" class="headerlink" title="1.4File类删除功能"></a>1.4File类删除功能</h2><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean delete()</td><td align="center">删除由此抽象路径名表示的文件或目录</td></tr></tbody></table><p>【注】：删除只能从下级目录（文件）往上级删，不能直接删除包含子目录或文件的目录。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> File类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2022/10/07/java-ji-he/"/>
      <url>/2022/10/07/java-ji-he/</url>
      
        <content type="html"><![CDATA[<p><a href="https://imgse.com/i/xhSJW6"><img src="https://s1.ax1x.com/2022/10/27/xhSJW6.png" alt="集合关系图"></a><br>【声明】本文仅提供常用方法和常用的集合类，了解更多请自行查找JDK帮助文档，这里给出在线帮助文档地址：</p><p><a href="https://www.runoob.com/manual/jdk11api/index.html">Overview (Java SE 11 &amp; JDK 11 ) (runoob.com)</a></p><p>【注】因为集合类(List和Set等)可以装入的对象的类型是不确定的，从集合中取出时都是Object类型，用时都需要进行强制转化，这样会很麻烦，用上泛型，就是提前告诉集合确定要装入集合的类型,这样就可以直接使用而不用显示类型转换，非常方便。</p><h2 id="1-Collection集合的常用方法"><a href="#1-Collection集合的常用方法" class="headerlink" title="1. Collection集合的常用方法"></a>1. Collection集合的常用方法</h2><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>boolean add(E e)</code></td><td align="center">添加元素</td></tr><tr><td align="center"><code>boolean remove(Object o)</code></td><td align="center">从集合中移除指定的元素</td></tr><tr><td align="center"><code>void clear()</code></td><td align="center">清空集合中的元素</td></tr><tr><td align="center"><code>boolean contains(Object o)</code></td><td align="center">判断集合中是否存在指定的元素</td></tr><tr><td align="center"><code>boolean isEmpty()</code></td><td align="center">判断集合是否为空</td></tr><tr><td align="center"><code>int size()</code></td><td align="center">集合的长度，也就是集合中元素的个数</td></tr></tbody></table><h3 id="Collection集合的遍历"><a href="#Collection集合的遍历" class="headerlink" title="Collection集合的遍历"></a>Collection集合的遍历</h3><h4 id="01-迭代器"><a href="#01-迭代器" class="headerlink" title="01. 迭代器"></a>01. 迭代器</h4><ul><li>迭代器的介绍<ul><li>迭代器，集合的专用遍历方式</li><li>Iterator iterator()：返回此集合中元素的迭代器，<strong>通过集合的iterator()方法</strong>得到</li><li>代器是通过集合的iterator()方法得到的，所以我们说它是<strong>依赖于集合而存在</strong>的</li></ul></li></ul><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>boolean hasNext()</code></td><td align="center">如果迭代具有更多元素，则返回 <code>true</code> 。</td></tr><tr><td align="center"><code>E next()</code></td><td align="center">返回迭代中的下一个元素。</td></tr><tr><td align="center"><code>default void remove()</code></td><td align="center">从底层集合中移除此迭代器返回的最后一个元素（可选操作）。</td></tr></tbody></table><p>【注】：如果迭代删除每一个元素,就<strong>必须使用迭代器方式进行删除</strong>否则会出现ConcurrentModificationException - 并发修改异常</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorDemo</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>Iterator&lt;String&gt; it = coll.iterator();</code>这段代码执行时，在集合内部就建立了一个指针（Java中没有指针概念，这里用指针来描述便于理解）。而指针的初识位置并不是指向内存中的0位，而是指向-1位。<br><img src="https://img-blog.csdnimg.cn/20190227203003763.png" alt="示意图"><br>每执行一次<code>String s = it.next();</code>，该指针便移向下一个位。当指针移到最后一位后，它的下一位就没有元素了，也就是<code>it.hasNext()</code>的返回值为<code>false</code>时，结束遍历，跳出循环。并且一旦指针移到了最后一位，理论上便回不去了，所以说迭代器是一次性的。如果这时再调用<code>String s = it.next();</code>，便会抛出空元素异常了。</p><h4 id="02-列表迭代器"><a href="#02-列表迭代器" class="headerlink" title="02. 列表迭代器"></a>02. 列表迭代器</h4><ul><li><p>ListIterator介绍</p><ul><li>通过List集合的listIterator()方法得到，所以说它是List集合特有的迭代器 </li><li>用于允许程序员沿任一方向遍历的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置</li></ul><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>void</code></td><td align="left"><code>add(E e)</code></td><td align="left">将指定的元素插入列表（可选操作）。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>hasNext()</code></td><td align="left">如果此列表迭代器在向前遍历列表时具有更多元素，则返回 <code>true</code> 。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>hasPrevious()</code></td><td align="left">如果此列表迭代器在反向遍历列表时具有更多元素，则返回 <code>true</code> 。</td></tr><tr><td align="left"><code>E</code></td><td align="left"><code>next()</code></td><td align="left">返回列表中的下一个元素并前进光标位置。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>nextIndex()</code></td><td align="left">返回后续调用 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/ListIterator.html#next()"><code>next()</code></a>将返回的元素的索引。</td></tr><tr><td align="left"><code>E</code></td><td align="left"><code>previous()</code></td><td align="left">返回列表中的上一个元素并向后移动光标位置。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>previousIndex()</code></td><td align="left">返回后续调用 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/ListIterator.html#previous()"><code>previous()</code></a>将返回的元素的索引。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>remove()</code></td><td align="left">从列表中删除 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/ListIterator.html#next()"><code>next()</code></a>或 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/ListIterator.html#previous()"><code>previous()</code></a> （可选操作）返回的最后一个元素。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>set(E e)</code></td><td align="left">用指定的元素替换 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/ListIterator.html#next()"><code>next()</code></a>或 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/ListIterator.html#previous()"><code>previous()</code></a>返回的最后一个元素（可选操作）。</td></tr></tbody></table></li></ul><p><strong>集合的三种遍历方式</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArrayList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.for循环遍历</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"for循环遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.迭代器遍历</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"迭代器遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3.增强for遍历</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增强for遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-List集合"><a href="#2-List集合" class="headerlink" title="2. List集合"></a>2. List集合</h1><ul><li><p>ArrayList集合</p><ul><li>底层数据结构是数组，查询快，增删慢，线程不安全，效率高，可以存储重复元素</li></ul></li><li><p>Vector集合</p><ul><li>底层数据结构是数组，查询快，增删慢，线程安全，效率低，可以存储重复元素</li></ul></li><li><p>LinkedList集合</p><ul><li>底层数据结构是链表，查询慢，增删快，线程不安全，效率高，可以存储重复元素</li></ul></li></ul><p><a href="http://t.csdn.cn/wcmGW">ArrayList和Vector区别，点击进行阅读！</a></p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList构造方法：</p><table><thead><tr><th align="center">构造器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>ArrayList()</code></td><td align="center">构造一个初始容量为10的空列表。</td></tr><tr><td align="center"><code>ArrayList(int initialCapacity)</code></td><td align="center">构造具有指定初始容量的空列表。</td></tr><tr><td align="center"><code>ArrayList(Collection&lt;? extends E&gt; c)</code></td><td align="center">按照集合的迭代器返回的顺序构造一个包含指定集合元素的列表。</td></tr></tbody></table><p>ArrayList常用方法：</p><table><thead><tr><th align="center">变量和类型</th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>void</code></td><td align="center"><code>add(int index, E element)</code></td><td align="center">将指定元素插入此列表中的指定位置。</td></tr><tr><td align="center"><code>boolean</code></td><td align="center"><code>add(E e)</code></td><td align="center">将指定的元素追加到此列表的末尾。</td></tr><tr><td align="center"><code>void</code></td><td align="center"><code>clear()</code></td><td align="center">从此列表中删除所有元素。</td></tr><tr><td align="center"><code>boolean</code></td><td align="center"><code>contains(Object o)</code></td><td align="center">如果此列表包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td align="center"><code>E</code></td><td align="center"><code>get(int index)</code></td><td align="center">返回此列表中指定位置的元素。</td></tr><tr><td align="center"><code>int</code></td><td align="center"><code>indexOf(Object o)</code></td><td align="center">返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-1。</td></tr><tr><td align="center"><code>E</code></td><td align="center"><code>remove(int index)</code></td><td align="center">删除此列表中指定位置的元素。</td></tr><tr><td align="center"><code>boolean</code></td><td align="center"><code>remove(Object o)</code></td><td align="center">从该列表中删除指定元素的第一个匹配项（如果存在）。</td></tr><tr><td align="center"><code>E</code></td><td align="center"><code>set(int index, E element)</code></td><td align="center">用指定的元素替换此列表中指定位置的元素。</td></tr><tr><td align="center"><code>int</code></td><td align="center"><code>size()</code></td><td align="center">返回此列表中的元素数。</td></tr></tbody></table><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li>概述： java.util.vector提供了向量类(Vector)以实现类似动态数组的功能。 Vector 可实现自动增长的对象数组。</li><li>创建了一个向量类的对象后，可以往其中随意插入不同类的对象(基本数据类型需要转为包装类对象)，即不需顾及类型也不需预先选定向量的容量，并可以方便地进行查找。</li></ul><blockquote><p>对于预先不知或者不愿预先定义数组大小，并且需要频繁地进行查找，插入，删除工作的情况，可以考虑使用向量类。</p></blockquote><table><thead><tr><th align="left">构造器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Vector()</code></td><td align="left">构造一个空向量，使其内部数据数组的大小为 <code>10</code> ，其标准容量增量为零。</td></tr><tr><td align="left"><code>Vector(int initialCapacity)</code></td><td align="left">构造一个具有指定初始容量且容量增量等于零的空向量。</td></tr><tr><td align="left"><code>Vector(int initialCapacity, int capacityIncrement)</code></td><td align="left">构造具有指定初始容量和容量增量的空向量。</td></tr><tr><td align="left"><code>Vector(Collection&lt;? extends E&gt; c)</code></td><td align="left">按照集合的迭代器返回的顺序构造一个包含指定集合元素的向量。</td></tr></tbody></table><blockquote><p>参数capacityincrement给定了每次扩充的扩充值。当capacityincrement为0的时候，则每次扩充一倍。</p></blockquote><p><strong>插入功能：</strong> </p><ul><li><p><code>public final synchronized void addElement(Object obj)</code> </p><p>将obj插入向量的尾部。obj可以是任何类型的对象。对同一个向量对象，亦可以在其中插入不同类的对象。</p><p>但<strong>插入的应是对象</strong>而不是数值，所以<strong>插入数值时要注意将数值转换成相应的对象。</strong> </p><p>示例：要插入整数1时，不要直接调用v.addElement(1),正确的方法为：</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Vector</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Integer i = 1;</span>v<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>public final synchronized void setElementAt(Object obj,int index)</code><br>  将index处的对象设置成obj，原来的对象将被覆盖。 </li><li><code>public final synchronized void insertElementAt(Object obj,int index) </code><br>  在index指定的位置插入obj，原来对象以及此后的对象依次往后顺延。</li></ul><p>插入功能实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu<span class="token punctuation">.</span>vector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Vector</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Vector</span> vec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            vec<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 2, 1, 4, 5]</span>        vec<span class="token punctuation">.</span><span class="token function">setElementAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[9, 2, 1, 4, 5]</span>        vec<span class="token punctuation">.</span><span class="token function">insertElementAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[9, 10, 2, 1, 4, 5]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除功能：</strong> </p><ul><li><p><code>public final synchronized void removeElement(Object obj) </code><br>从向量中删除obj，若有多个存在，则从向量头开始试，删除找到的第一个与obj相同的向量成员。 </p></li><li><p><code>public final synchronized void removeAllElement();</code> </p><p>删除向量所有的对象 </p></li><li><p><code>public fianl synchronized void removeElementAt(int index) </code><br>删除index所指的地方的对象</p></li></ul><p>删除功能实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu<span class="token punctuation">.</span>vector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Vector</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Vector</span> vec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            vec<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 2, 1, 4, 5]</span>        vec<span class="token punctuation">.</span><span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 1, 4, 5]</span>        vec<span class="token punctuation">.</span><span class="token function">removeElementAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 4, 5]</span>        vec<span class="token punctuation">.</span><span class="token function">removeAllElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查询搜索功能：</strong> </p><ul><li><p><code>public final int indexOf(Object obj) </code><br>从向量头开始搜索obj,返回所遇到的第一个obj对应的下标，若不存在此obj,返回-1. </p></li><li><p><code>public final synchronized int indexOf(Object obj,int index) </code><br>从index所表示的下标处开始搜索obj. </p></li><li><p><code>public final int lastindexOf(Object obj) </code><br>从向量尾部开始逆向搜索obj. </p></li><li><p><code>public final synchornized int lastIndex(Object obj,int index) </code><br>从index所表示的下标处由尾至头逆向搜索obj. </p></li><li><p><code>public synchronized E elementAt(int index)</code></p><p>获取向量对象中下标处的元素</p></li><li><p><code>public final synchornized firstElement() </code><br>获取向量对象中的首个obj </p></li><li><p><code>public final synchornized Object lastElement() </code><br>获取向量对象的最后一个obj</p></li></ul><p>查询搜索实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu<span class="token punctuation">.</span>vector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Vector</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Vector</span> vec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            vec<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 2, 1, 4, 5]</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他功能:</strong></p><ul><li><p><code>public final int size();</code> </p><p>此方法用于获取向量元素的个数。它们返回值是向量中实际存在的元素个数，而非向量容量。</p><p>可以调用方法<code>capacity()</code>来获取容量值。</p></li><li><p><code>public final synchronized void setSize(int newsize);</code> </p><p>此方法用来定义向量的大小，若向量对象现有成员个数已经超过了newsize的值，则超过部分的多余元素会丢失。</p></li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><blockquote><p>LinkedList有索引，带索引的方法有：</p><p>void <strong>add</strong> (int index, E element)<br>E <strong>get</strong> (int index)</p></blockquote><p><strong>LinkedList的特有方法</strong></p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>public void addFirst(E e)</code></td><td align="center">在该列表开头插入指定的元素</td></tr><tr><td align="center"><code>public void addLast(E e)</code></td><td align="center">将指定的元素追加到此列表的末尾</td></tr><tr><td align="center"><code>public E removeFirst()</code></td><td align="center">从此列表中删除并返回第一个元素</td></tr><tr><td align="center"><code>public E removeLast()</code></td><td align="center">从此列表中删除并返回最后一个元素</td></tr><tr><td align="center"><code>public E getFirst()</code></td><td align="center">返回此列表中的第一个元素</td></tr><tr><td align="center"><code>public E getLast()</code></td><td align="center">返回此列表中的最后一个元素</td></tr></tbody></table><h1 id="3-Set集合"><a href="#3-Set集合" class="headerlink" title="3. Set集合"></a>3. Set集合</h1><ul><li>Set集合的特点<ul><li>元素<strong>存取无序</strong> </li><li><strong>没有索引</strong>、只能通过迭代器或增强for循环遍历 </li><li><strong>不</strong>能存储<strong>重复</strong>元素</li></ul></li></ul><h3 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h3><ul><li>哈希值简介 <ul><li>是JDK根据对象的<strong>地址</strong>或者<strong>字符串</strong>或者<strong>数字</strong>算出来的<strong>int类型的数值</strong></li></ul></li><li>如何获取哈希值 <ul><li>Object类中的public int **hashCode()**：返回对象的哈希码值</li></ul></li><li><strong>哈希值的特点</strong> <ul><li>同一个对象多次调用hashCode()方法返回的哈希值是相同的 </li><li>默认情况下，不同对象的哈希值是不同的。而重写hashCode()方法，可以实现让不同对象的哈希值相同</li></ul></li></ul><h2 id="3-1-HashSet"><a href="#3-1-HashSet" class="headerlink" title="3.1  HashSet"></a>3.1  HashSet</h2><table><thead><tr><th align="center">构造器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>HashSet()</code></td><td align="center">构造一个新的空集; 支持<code>HashMap</code>实例具有默认初始容量（16）和加载因子（0.75）。</td></tr><tr><td align="center"><code>HashSet(int initialCapacity)</code></td><td align="center">构造一个新的空集; 支持<code>HashMap</code>实例具有指定的初始容量和默认加载因子（0.75）。</td></tr><tr><td align="center"><code>HashSet(int initialCapacity, float loadFactor)</code></td><td align="center">构造一个新的空集; 支持<code>HashMap</code>实例具有指定的初始容量和指定的加载因子。</td></tr><tr><td align="center"><code>HashSet(Collection&lt;? extends E&gt; c)</code></td><td align="center">构造一个包含指定集合中元素的新集合。</td></tr></tbody></table><ul><li>HashSet集合的特点（<strong>添加自定义类对象要重写equals()和hashCode()方法</strong>）<ul><li>底层数据结构是<strong>哈希表</strong>（<a href="https://zhuanlan.zhihu.com/p/107326081">什么是哈希表？ - 知乎 (zhihu.com)</a>）</li><li>它是由HashMap实现的，<strong>不保证元素的顺序</strong>，而且HashSet<strong>允许使用 null</strong> 元素。</li><li>没有带索引的方法，所以不能使用普通for循环遍历 </li><li>由于是Set集合，所以是不包含重复元素的集合</li></ul></li></ul><p><a href="https://imgse.com/i/xhSGJx"><img src="https://s1.ax1x.com/2022/10/27/xhSGJx.png" alt="HashSet保证元素唯一性图解" style="zoom:50%;" /></a></p><p><a href="https://imgse.com/i/xfPto9"><img src="https://s1.ax1x.com/2022/10/26/xfPto9.png" alt="哈希表"></a></p><h2 id="3-2-LinkedHashSet"><a href="#3-2-LinkedHashSet" class="headerlink" title="3.2 LinkedHashSet"></a>3.2 LinkedHashSet</h2><ol><li>LinkedHashSet是<strong>HashSet的子类</strong></li><li>LinkedHashSet底层是一个LinkedHashMap，底层维护了一个<strong>数组+双向链表</strong></li><li>LinkedHashSet根据元素的hashCode值来决定元素的存储位置，同时使用链表维护元素的次序，这使元素看起来以插入顺序保存的</li><li>LinkedHashSet不允许添加重复元素</li></ol><p><strong>注意是由于底层维护着是一个双向链表和数组，所以插入和取出的顺序是一致的,原因是用了链表维护元素添加的顺序</strong></p><h2 id="3-3-TreetSet"><a href="#3-3-TreetSet" class="headerlink" title="3.3 TreetSet"></a>3.3 TreetSet</h2><ul><li><p>TreeSet集合概述</p><ul><li><p>元素<strong>有序</strong>，可以按照一定的规则进行排序，具体排序方式取决于构造方法 </p><ul><li><p><strong>TreeSet()<strong>：根据其元素的</strong>自然排序</strong>进行排序 </p></li><li><p><strong>TreeSet(Comparator comparator)</strong> ：根据指定的比较器进行排序</p></li></ul></li><li><p>没有带索引的方法，所以不能使用普通for循环遍历 </p></li><li><p>由于是Set集合，所以不包含重复元素的集合</p></li></ul></li></ul><h2 id="Set集合的排序"><a href="#Set集合的排序" class="headerlink" title="Set集合的排序"></a>Set集合的排序</h2><h3 id="01-Comparable"><a href="#01-Comparable" class="headerlink" title="01. Comparable"></a>01. Comparable</h3><ul><li><p>实现步骤 </p><ul><li><p>用TreeSet集合存储自定义对象，<strong>无参构造方法使用的是自然排序对元素进行排序的</strong></p></li><li><p><strong>自然排序</strong>，就是让元素所属的类<strong>实现Comparable接口</strong>，<strong>重写compareTo(T o)方法</strong></p></li></ul><blockquote><p>注：Collection.sort(list)会自动调用compareTo,如果没有这句，list是不会排序的，也不会调用compareTo方法</p></blockquote></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Student类中有成员属性int age,String name</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// return 0; </span>   <span class="token comment">// return 1; </span>   <span class="token comment">// return -1; </span>   <span class="token comment">//按照年龄从小到大排序 </span>   <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> s<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token comment">// int num = s.age - this.age; 从大到小排序</span>   <span class="token comment">//年龄相同时，按照姓名的字母顺序排序 </span>   <span class="token keyword">int</span> num2 <span class="token operator">=</span> num<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">:</span>num<span class="token punctuation">;</span>        <span class="token keyword">return</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>this指的是最后一个添加的元素，s指的是TreeSet对象中前一个元素</p><h3 id="02-Comparator"><a href="#02-Comparator" class="headerlink" title="02. Comparator"></a>02. Comparator</h3><ul><li>实现步骤 <ul><li>用TreeSet集合存储自定义对象，<strong>无参构造方法使用的是自然排序对元素进行排序的</strong></li><li><strong>比较器排序</strong>，就是让集合构造方法<strong>接收Comparator的实现类对象</strong>（<strong>重写接口</strong>），<strong>重写compare(T o1,T o2)方法</strong></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s1<span class="token punctuation">,</span> <span class="token class-name">Student</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//this.age - s.age</span><span class="token comment">//s1,s2</span><span class="token keyword">int</span> num <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> num <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> num<span class="token punctuation">;</span><span class="token keyword">return</span> num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s1指的是集合储存的后面的一个对象，s2指的是集合中存的前一个对象</p><blockquote><p>Collections工具类里面的用于排序的方法：</p><p><code>static &lt;T extends Comparable&lt;? super T&gt;&gt;void sort(List&lt;T&gt; list)</code></p><p><code>static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code></p></blockquote><h1 id="4-Map"><a href="#4-Map" class="headerlink" title="4. Map"></a>4. Map</h1><ul><li>Map集合概述</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token class-name">K</span>：键的类型；<span class="token class-name">V</span>：值的类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>Map集合的特点 </p><ul><li>键值对映射关系 </li><li>一个键对应一个值 </li><li><strong>键不能重复，值可以重复</strong> </li><li>元素存取<strong>无序</strong></li></ul></li><li><p>Map集合的基本功能</p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">V <strong>put(K key,V value)</strong></td><td align="center">添加元素</td></tr><tr><td align="center">V <strong>remove(Object key)</strong></td><td align="center">根据键删除键值对元素</td></tr><tr><td align="center">void clear()</td><td align="center">移除所有的键值对元素</td></tr><tr><td align="center">boolean <strong>containsKey(Object key)</strong></td><td align="center">判断集合是否包含指定的键</td></tr><tr><td align="center">boolean <strong>containsValue(Object value)</strong></td><td align="center">判断集合是否包含指定的值</td></tr><tr><td align="center">boolean <strong>isEmpty()</strong></td><td align="center">判断集合是否为空</td></tr><tr><td align="center">int <strong>size()</strong></td><td align="center">集合的长度，也就是集合中键值对的个数</td></tr></tbody></table></li><li><p>Map集合的获取功能</p></li></ul><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">V <strong>get(Object key)</strong></td><td align="center">根据键获取值</td></tr><tr><td align="center">Set <strong>keySet()</strong></td><td align="center">获取所有键的集合</td></tr><tr><td align="center">Collection <strong>values()</strong></td><td align="center">获取所有值的集合</td></tr><tr><td align="center">Set &lt;**Map.Entry**&lt;K,V&gt;&gt; <strong>entrySet()</strong></td><td align="center">获取所有键值对对象的集合</td></tr></tbody></table><blockquote><p>Map.Entry是一个Set子类对象</p></blockquote><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pers<span class="token punctuation">.</span>lusanjiu</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHashMap</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;1003=张三, 1004=李四, 1005=王五, 1006=王五&#125;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1003, 1004, 1005, 1006]</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[张三, 李四, 王五, 王五]</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1003=张三, 1004=李四, 1005=王五, 1006=王五]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map集合的遍历"><a href="#Map集合的遍历" class="headerlink" title="Map集合的遍历"></a>Map集合的遍历</h2><ul><li>方法一<ol><li>获取所有键的集合</li><li>增强for遍历，获取每一个键</li><li>键找值</li></ol></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建集合对象</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加元素</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">,</span> <span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"郭靖"</span><span class="token punctuation">,</span> <span class="token string">"黄蓉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"杨过"</span><span class="token punctuation">,</span> <span class="token string">"小龙女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有键的集合。用keySet()方法实现</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历键的集合，获取到每一个键。用增强for实现</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//根据键去找值。用get(Object key)方法实现</span><span class="token class-name">String</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法二<ol><li>获取所有键值对对象的集合</li><li>用增强for实现，得到每一个<strong>Map.Entry</strong></li><li>用getKey()得到键、用getValue()得到值</li></ol></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo02</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建集合对象</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加元素</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">,</span> <span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"郭靖"</span><span class="token punctuation">,</span> <span class="token string">"黄蓉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"杨过"</span><span class="token punctuation">,</span> <span class="token string">"小龙女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有键值对对象的集合</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历键值对对象的集合，得到每一个键值对对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> me <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//根据键值对对象获取键和值</span><span class="token class-name">String</span> key <span class="token operator">=</span> me<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> value <span class="token operator">=</span> me<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客 (二)</title>
      <link href="/2022/10/02/hexo-da-jian-ge-ren-bo-ke-er/"/>
      <url>/2022/10/02/hexo-da-jian-ge-ren-bo-ke-er/</url>
      
        <content type="html"><![CDATA[<h2 id="01-Windows命令行下运行指令"><a href="#01-Windows命令行下运行指令" class="headerlink" title="01.Windows命令行下运行指令"></a>01.Windows命令行下运行指令</h2><pre class="line-numbers language-none"><code class="language-none">npm install hexo -deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现问题参考：<a href="https://blog.csdn.net/qq_41378597/article/details/104090243"> npm install时长时间停留在fetchMetadata: sill解决方法_Evan Wang的博客-CSDN博客</a></p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021617036.png" alt="image-20221001234206715" style="zoom:50%;" /><p>【注】此图为我在Windows下运行的结果，但在后面的运行部署命令hexo d 时报错 <strong>ERROR Deployer not found: git</strong>，之后我在Linux终端运行上述指令解决了此问题</p><h2 id="02-注册github账号-创建仓库"><a href="#02-注册github账号-创建仓库" class="headerlink" title="02.注册github账号,创建仓库"></a>02.注册github账号,创建仓库</h2><p>注册GitHub账号不在赘述，打开<a href="https://github.com/%E6%8C%89%E7%85%A7%E5%AE%98%E6%96%B9%E7%BB%99%E7%9A%84%E6%AD%A5%E9%AA%A4%E7%9B%B4%E6%8E%A5%E6%B3%A8%E5%86%8C%E5%8D%B3%E5%8F%AF">https://github.com/按照官方给的步骤直接注册即可</a></p><p>新建一个项目仓库New repository，如下所示：</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021617356.png" alt="image-20221002085400672" style="zoom:50%;" /><p>要创建一个和你用户名相同的仓库，后面加github.io，只有这样，将来要部署到GitHub的时候，才会被识别。</p><h2 id="03-设置-config-yml文件"><a href="#03-设置-config-yml文件" class="headerlink" title="03.设置_config.yml文件"></a>03.设置_config.yml文件</h2><p>打开文件拖到最下面，修改如图</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021617729.png" alt="image-20221001235241318" style="zoom:50%;" /><p>其中repo是你创建的仓库地址，注意修改</p><p>【注】冒号后面有空格</p><h2 id="04-将用户名和邮箱进行初始化"><a href="#04-将用户名和邮箱进行初始化" class="headerlink" title="04.将用户名和邮箱进行初始化"></a>04.将用户名和邮箱进行初始化</h2><p>Linux终端运行命令</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.email &quot;xxx&quot; # xxx为你的邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;xxx&quot; # xxx为你的用户名，注意不是昵称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行部署命令hexo d之后会弹出来一个窗口，点击会弹出一个网站如下，点击授权</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021617748.png" alt="image-20221002001737385" style="zoom: 40%;" /><p>授权完成可以在此仓库里看见上传的文件，在浏览器输入<code>xxx.github.io</code>，其中xxx为你的用户名</p><p>网站成功打开，部署完成！</p><p>【注】如果未弹出网站或者网站进不去，说明访问GitHub的网络不行，需要<strong>生成SSH添加到GitHub</strong>：</p><p><em>温馨提示</em>，<em>最好使用生成SSH添加到GitHub，后面对仓库的管理需要用到。</em></p><h2 id="05-用SSH生成公钥添加到GitHub"><a href="#05-用SSH生成公钥添加到GitHub" class="headerlink" title="05.用SSH生成公钥添加到GitHub"></a>05.用SSH生成公钥添加到GitHub</h2><p><strong>生成密钥文件</strong></p><p>输入命令<code>ssh-keygen -t rsa -C &quot;xxx&quot;</code> xxx为你的邮箱 </p><p>回车之后会出现如下所示的输出，直接一路回车：</p><blockquote><p>Generating public&#x2F;private rsa key pair.<br>Enter file in which to save the key<br>(&#x2F;Users&#x2F;your_user_directory&#x2F;.ssh&#x2F;id_rsa): (按回车键)<br>Enter passphrase (empty for no passphrase): (按回车键)<br>Enter same passphrase again: (按回车键)</p></blockquote><p>这样密钥文件就生成了，默认在用户目录下，如：<code>C:\User\xxx\.ssh\</code> 这个文件夹中。其中的xxx是你的windows用户名。</p><p><strong>将公钥添加到Github中</strong></p><ol><li>在<code>C:\user\xxx\.ssh\</code>文件夹中找到<code>id_rsa.pub</code>这个文件，用文本编辑器(如记事本)打开，复制里面的所有内容。</li><li>登陆<code>github账号</code>，点击头像旁的<code>小三角</code>展开，点击<code>settings</code>-<code>SSH and GPG keys</code>-<code>New SSH key</code>，在<code>Title</code>中取一个名字（任意），<code>key</code>中粘贴你刚刚复制的内容。然后点击<code>Add SSH key</code>即可。</li></ol><p><strong>测试是否关联成功</strong></p><p>输入命令</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现以下结果即为成功：</p><blockquote><p>Hi WangRongsheng! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客 (一)</title>
      <link href="/2022/10/02/hexo-da-jian-ge-ren-bo-ke-yi/"/>
      <url>/2022/10/02/hexo-da-jian-ge-ren-bo-ke-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/av44544186?from=search&seid=1621519341015391579">此博客基于B站视频改进</a></p><h1 id="1-1安装-Node-js"><a href="#1-1安装-Node-js" class="headerlink" title="1.1安装 Node.js"></a>1.1安装 Node.js</h1><p>首先打开<a href="https://nodejs.org/">官方网站</a>下载安装</p><blockquote><p><a href="https://nodejs.org/">https://nodejs.org</a></p></blockquote><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021247300.png" alt="image-20221001194614034" style="zoom:50%;" /><p>安装步骤非常简单，无脑下一步就可以了，默认安装就行(也可以设置自己的安装路径)。</p><h3 id="1-1-2测试"><a href="#1-1-2测试" class="headerlink" title="1.1.2测试"></a>1.1.2测试</h3><p>node -v 查看node的版本<br>npm -v 查看npm的版本(新版的node安装自带安装npm)</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021257742.png" alt="image-20221001195413239" style="zoom:50%;" /><h3 id="1-2安装淘宝镜像cnpm"><a href="#1-2安装淘宝镜像cnpm" class="headerlink" title="1.2安装淘宝镜像cnpm"></a>1.2安装淘宝镜像cnpm</h3><p>在dos命令行下输入以下命令安装</p><blockquote><p>npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p></blockquote><p>如果失败可以重复几次(以管理员的身份运行)，安装完成后输入<strong>cnpm</strong>查看是否安装成功，输入<strong>cnpm -v</strong>查看安装版本</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021257936.png" alt="image-20221001203305856" style="zoom:40%;" /><h1 id="2-1安装-Git"><a href="#2-1安装-Git" class="headerlink" title="2.1安装 Git"></a>2.1安装 Git</h1><p>打开<a href="https://git-scm.com/downloads">官方网站</a><br><code>https://git-scm.com/downloads</code><br>然后我们选择windows版本的下载</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210041322168.png" alt="image-20221001211420329" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021259007.png" alt="image-20221001211343831" style="zoom:50%;" /><p>安装官方默认的来就行,无脑下一步</p><p>接下来有两种方案，选择其中一种即可，建议选择第一种。</p><p><strong>【1】配置git环境变量，在Windows下的命令行中打开Linux终端</strong></p><p><a href="https://blog.csdn.net/aaxzsuj/article/details/108973697">Git配置环境变量_码界拼命小小白的博客-CSDN博客</a></p><p><strong>【2】使用git下的Git Bash</strong></p><p>安装成功后在开始菜单查看</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021300491.png" alt="image-20221001212809730" style="zoom:40%;" /><blockquote><p>tips：这个Git Bash下载下来就相当于Linux中的终端窗口了，以后我们就用这个东东来打开终端。</p></blockquote><p>安装完nodejs之后配置windows环境变量只能保证在命令行工具中可以使用npm，如果想在git bash中使用需要再安装一遍。</p><p>打开Git Bash输入指令</p><blockquote><p>git clone –recursive git:&#x2F;&#x2F;github.com&#x2F;isaacs&#x2F;npm.git</p></blockquote><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021300884.png" alt="image-20221001221638550" style="zoom:50%;" />检查一下：npm -v<img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021300878.png" alt="image-20221001221711654" style="zoom:50%;" />没有问题，可以继续使用了。<h1 id="3-1安装-hexo框架"><a href="#3-1安装-hexo框架" class="headerlink" title="3.1安装 hexo框架"></a>3.1安装 hexo框架</h1><p>在命令行下输入以下命令安装</p><blockquote><p>cnpm install -g hexo-cli</p></blockquote><p>输入<strong>hexo -v</strong>查看hexo版本，检验是否安装成功</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021300142.png" alt="image-20221001203847526" style="zoom:40%;" /><h1 id="4-1创建blog目录"><a href="#4-1创建blog目录" class="headerlink" title="4.1创建blog目录"></a>4.1创建blog目录</h1><ol><li><p>在命令行中输入指令<code>mkdir D:\blog</code><br>  也可以自己指定创建位置，比如我的blog位置在C:\users\liu，我的指令是mkdir C:\users\liu\blog<br>  如果搭建博客过程中有问题，大不了把文件夹干掉重来，无需畏惧</p></li><li><p>​       【1】如果你在步骤2.1选择第一种方案</p><p>  打开Windows下的cmd命令行，输入sh进入Linux终端，然后进入到blog的路径，输入指令<code>hexo init</code> 生成博客</p>  <img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021300666.png" alt="image-20221001220654618" style="zoom:50%;" /><p>  【2】选择第二种方案的看这里</p></li></ol><p>打开git bash进入到blog的路径，输入指令<code>hexo init</code> 生成博客（使用指令pwd可以查看当前所在路径）</p><h1 id="5-1运行测试"><a href="#5-1运行测试" class="headerlink" title="5.1运行测试"></a>5.1运行测试</h1><p>这里我们经常用到的有三个命令</p><blockquote><p>hexo clean #用来清理缓存文件<br>hexo g        #生成文件<br>hexo s        #运行本地服务器<br>hexo d       #上传到服务器</p></blockquote><p>运行<code>hexo s</code><br><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021300172.png" alt="image-20221001222139427" style="zoom:50%;" /></p><p>打开浏览器，输入<code>localhost:4000</code>,看到</p><img src="https://raw.githubusercontent.com/lusanjiu/images/main/img/202210021300214.png" alt="image-20221001222322471" style="zoom:80%;" /><p>成功，完美！</p><p>【注】：此时你会发现无法往命令行中输入，因为此时终端被hexo的这个进程占用，输入cirl+c可以中断</p><hr><p>接下来让我们创建一篇markdown文档（推荐使用Typora），将此文件放在C:\Users\liu\blog\source_posts 中，比如我将此博客放进去，使用指令<code>hexo s</code>一键部署。相信各位看客老爷们已经看到效果啦。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/01/hello-world/"/>
      <url>/2022/10/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
